# Generated by Claude
"""
Unit tests for JavaMCPServer.
"""

from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest

from javamcp.config.schema import ApplicationConfig, RepositoryConfig
from javamcp.indexer.indexer import APIIndexer
from javamcp.indexer.query_engine import QueryEngine
from javamcp.models.java_entities import JavaClass
from javamcp.repository.manager import RepositoryManager
from javamcp.server import JavaMCPServer, create_server


class TestJavaMCPServer:
    """Tests for JavaMCPServer class."""

    def test_init(self):
        """Test server initialization."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)

        assert server.config == config
        assert not server.is_initialized()
        assert isinstance(server.repository_manager, RepositoryManager)
        assert isinstance(server.indexer, APIIndexer)
        assert isinstance(server.query_engine, QueryEngine)

    def test_init_creates_components(self):
        """Test that init creates all required components."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)

        assert server.repository_manager is not None
        assert server.indexer is not None
        assert server.query_engine is not None
        assert server.query_engine.indexer == server.indexer

    @patch.object(RepositoryManager, "initialize_repositories")
    def test_initialize(self, mock_init_repos):
        """Test server initialization."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        server.initialize()

        mock_init_repos.assert_called_once()
        assert server.is_initialized()

    @patch.object(RepositoryManager, "initialize_repositories")
    def test_initialize_only_once(self, mock_init_repos):
        """Test that calling initialize multiple times is idempotent."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        server.initialize()
        server.initialize()

        # Should only be called once
        assert mock_init_repos.call_count == 2
        assert server.is_initialized()

    def test_is_initialized_false_by_default(self):
        """Test that server starts uninitialized."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)

        assert not server.is_initialized()

    @patch.object(RepositoryManager, "initialize_repositories")
    def test_is_initialized_true_after_init(self, mock_init_repos):
        """Test that server is initialized after calling initialize."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        server.initialize()

        assert server.is_initialized()

    def test_get_query_engine(self):
        """Test getting query engine."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        engine = server.get_query_engine()

        assert engine is not None
        assert isinstance(engine, QueryEngine)
        assert engine.indexer == server.indexer

    def test_get_indexer(self):
        """Test getting indexer."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        indexer = server.get_indexer()

        assert indexer is not None
        assert isinstance(indexer, APIIndexer)

    @patch.object(RepositoryManager, "initialize_repositories")
    def test_shutdown(self, mock_init_repos):
        """Test server shutdown."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        server.initialize()

        # Add some data to indexer
        java_class = JavaClass(
            name="TestClass",
            fully_qualified_name="com.example.TestClass",
            package="com.example",
        )
        server.indexer.add_class(java_class, "test-repo")

        server.shutdown()

        assert not server.is_initialized()
        # Verify indexer was cleared
        assert len(server.indexer.class_index) == 0

    def test_shutdown_clears_indexer(self):
        """Test that shutdown clears the indexer."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)

        # Add some data
        java_class = JavaClass(
            name="TestClass",
            fully_qualified_name="com.example.TestClass",
            package="com.example",
        )
        server.indexer.add_class(java_class, "test-repo")

        assert len(server.indexer.class_index) == 1

        server.shutdown()

        assert len(server.indexer.class_index) == 0

    def test_multiple_shutdowns(self):
        """Test that calling shutdown multiple times is safe."""
        config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )

        server = JavaMCPServer(config)
        server.shutdown()
        server.shutdown()

        assert not server.is_initialized()


class TestCreateServer:
    """Tests for create_server function."""

    @patch("javamcp.server.load_config")
    def test_create_server_default_config(self, mock_load_config):
        """Test creating server with default config."""
        mock_config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )
        mock_load_config.return_value = mock_config

        server = create_server()

        mock_load_config.assert_called_once_with(None)
        assert isinstance(server, JavaMCPServer)
        assert server.config == mock_config

    @patch("javamcp.server.load_config")
    def test_create_server_custom_config(self, mock_load_config):
        """Test creating server with custom config path."""
        mock_config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )
        mock_load_config.return_value = mock_config

        server = create_server("/path/to/config.yaml")

        mock_load_config.assert_called_once_with("/path/to/config.yaml")
        assert isinstance(server, JavaMCPServer)
        assert server.config == mock_config

    @patch("javamcp.server.load_config")
    def test_create_server_returns_uninitialized(self, mock_load_config):
        """Test that create_server returns uninitialized server."""
        mock_config = ApplicationConfig(
            repositories=RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path="/tmp/repos",
            )
        )
        mock_load_config.return_value = mock_config

        server = create_server()

        assert not server.is_initialized()

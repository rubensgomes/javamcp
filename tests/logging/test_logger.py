# Generated by Claude
"""
Unit tests for logging module.
"""

import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path

import pytest

from javamcp.config.schema import LoggingConfig
from javamcp.logging import (ContextLogger, get_logger, log_parse_operation,
                             log_repository_operation, log_server_shutdown,
                             log_server_startup, log_tool_invocation,
                             setup_logging)


class TestSetupLogging:
    """Tests for setup_logging function."""

    def test_setup_logging_console_only(self):
        """Test logging setup with console output only."""
        config = LoggingConfig(level="INFO")

        logger = setup_logging(config)

        assert logger.name == "javamcp"
        assert logger.level == logging.INFO
        assert len(logger.handlers) == 1
        assert isinstance(logger.handlers[0], logging.StreamHandler)

    def test_setup_logging_with_file(self, tmp_path):
        """Test logging setup with file output."""
        log_file = tmp_path / "test.log"
        config = LoggingConfig(level="DEBUG", file_path=str(log_file))

        logger = setup_logging(config)

        assert logger.level == logging.DEBUG
        assert len(logger.handlers) == 2
        handler_types = [type(h).__name__ for h in logger.handlers]
        assert "StreamHandler" in handler_types
        assert "RotatingFileHandler" in handler_types

    def test_setup_logging_creates_directory(self, tmp_path):
        """Test that logging setup creates log directory if needed."""
        log_file = tmp_path / "logs" / "app" / "test.log"
        config = LoggingConfig(level="INFO", file_path=str(log_file))

        logger = setup_logging(config)

        assert log_file.parent.exists()
        assert len(logger.handlers) == 2

    def test_setup_logging_different_levels(self):
        """Test logging setup with different log levels."""
        levels = [
            ("DEBUG", logging.DEBUG),
            ("INFO", logging.INFO),
            ("WARNING", logging.WARNING),
            ("ERROR", logging.ERROR),
        ]

        for level_name, level_value in levels:
            config = LoggingConfig(level=level_name)
            logger = setup_logging(config)
            assert logger.level == level_value

    def test_setup_logging_clears_existing_handlers(self):
        """Test that setup_logging clears existing handlers."""
        config = LoggingConfig(level="INFO")

        # Setup twice
        logger1 = setup_logging(config)
        logger2 = setup_logging(config)

        # Should have same number of handlers, not doubled
        assert len(logger1.handlers) == len(logger2.handlers)

    def test_setup_logging_rotation_config(self, tmp_path):
        """Test logging setup with custom rotation configuration."""
        log_file = tmp_path / "test.log"
        config = LoggingConfig(
            level="INFO",
            file_path=str(log_file),
            max_bytes=1024,
            backup_count=3,
        )

        logger = setup_logging(config)

        # Find the RotatingFileHandler
        rotating_handler = None
        for handler in logger.handlers:
            if isinstance(handler, RotatingFileHandler):
                rotating_handler = handler
                break

        assert rotating_handler is not None
        assert rotating_handler.maxBytes == 1024
        assert rotating_handler.backupCount == 3

    def test_setup_logging_rotation_behavior(self, tmp_path):
        """Test that log rotation actually occurs when max_bytes is exceeded."""
        log_file = tmp_path / "test.log"
        # Set very small max_bytes to trigger rotation easily
        config = LoggingConfig(
            level="INFO",
            file_path=str(log_file),
            max_bytes=100,
            backup_count=2,
        )

        logger = setup_logging(config)

        # Write enough logs to trigger rotation
        for i in range(50):
            logger.info(f"Test message number {i} with some extra text to fill space")

        # Check that rotation occurred - backup file should exist
        backup_file = Path(f"{log_file}.1")
        assert log_file.exists()
        # Backup file may or may not exist depending on exact log size
        # Just verify main log file didn't exceed max size by much
        if log_file.exists():
            # File size should be reasonably close to max_bytes after rotation
            assert log_file.stat().st_size < 1000  # Allow some overhead


class TestGetLogger:
    """Tests for get_logger function."""

    def test_get_logger_default(self):
        """Test getting default logger."""
        logger = get_logger()

        assert logger.name == "javamcp"

    def test_get_logger_with_name(self):
        """Test getting named logger."""
        logger = get_logger("parser")

        assert logger.name == "javamcp.parser"

    def test_get_logger_hierarchy(self):
        """Test logger hierarchy."""
        parent = get_logger()
        child = get_logger("indexer")

        assert child.parent == parent or child.name.startswith(parent.name)


class TestContextLogger:
    """Tests for ContextLogger class."""

    def test_init(self):
        """Test ContextLogger initialization."""
        base_logger = logging.getLogger("test")
        context_logger = ContextLogger(base_logger)

        assert context_logger.logger == base_logger
        assert context_logger.context == {}

    def test_set_context(self):
        """Test setting context."""
        base_logger = logging.getLogger("test")
        context_logger = ContextLogger(base_logger)

        context_logger.set_context(repository="test-repo", class_name="TestClass")

        assert context_logger.context["repository"] == "test-repo"
        assert context_logger.context["class_name"] == "TestClass"

    def test_clear_context(self):
        """Test clearing context."""
        base_logger = logging.getLogger("test")
        context_logger = ContextLogger(base_logger)

        context_logger.set_context(repository="test-repo")
        context_logger.clear_context()

        assert context_logger.context == {}

    def test_format_message_with_context(self):
        """Test message formatting with context."""
        base_logger = logging.getLogger("test")
        context_logger = ContextLogger(base_logger)

        context_logger.set_context(repository="test-repo", class_name="TestClass")
        formatted = context_logger._format_message("Test message")

        assert "Test message" in formatted
        assert "repository=test-repo" in formatted
        assert "class_name=TestClass" in formatted

    def test_format_message_without_context(self):
        """Test message formatting without context."""
        base_logger = logging.getLogger("test")
        context_logger = ContextLogger(base_logger)

        formatted = context_logger._format_message("Test message")

        assert formatted == "Test message"

    def test_log_methods(self, caplog):
        """Test all logging methods."""
        base_logger = logging.getLogger("test")
        base_logger.setLevel(logging.DEBUG)
        context_logger = ContextLogger(base_logger)

        context_logger.set_context(test="value")

        with caplog.at_level(logging.DEBUG, logger="test"):
            context_logger.debug("Debug message")
            context_logger.info("Info message")
            context_logger.warning("Warning message")
            context_logger.error("Error message")

        assert "Debug message" in caplog.text
        assert "Info message" in caplog.text
        assert "Warning message" in caplog.text
        assert "Error message" in caplog.text
        assert "test=value" in caplog.text


class TestLogHelpers:
    """Tests for logging helper functions."""

    def test_log_server_startup(self, caplog):
        """Test server startup logging."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_server_startup(logger)

        assert "JavaMCP server starting" in caplog.text

    def test_log_server_startup_with_config(self, caplog):
        """Test server startup logging with config path."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_server_startup(logger, config_path="/path/to/config.yaml")

        assert "JavaMCP server starting" in caplog.text
        assert "/path/to/config.yaml" in caplog.text

    def test_log_server_shutdown(self, caplog):
        """Test server shutdown logging."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_server_shutdown(logger)

        assert "JavaMCP server shutting down" in caplog.text

    def test_log_tool_invocation(self, caplog):
        """Test tool invocation logging."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_tool_invocation(
                logger,
                "search_methods",
                method_name="testMethod",
                class_name="TestClass",
            )

        assert "Tool invocation: search_methods" in caplog.text
        assert "method_name=testMethod" in caplog.text
        assert "class_name=TestClass" in caplog.text

    def test_log_repository_operation_success(self, caplog):
        """Test repository operation logging (success)."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_repository_operation(
                logger, "clone", "https://github.com/example/repo.git"
            )

        assert "Repository clone" in caplog.text
        assert "https://github.com/example/repo.git" in caplog.text
        assert "success" in caplog.text

    def test_log_repository_operation_failure(self, caplog):
        """Test repository operation logging (failure)."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.INFO)

        with caplog.at_level(logging.INFO, logger="test"):
            log_repository_operation(
                logger, "clone", "https://github.com/example/repo.git", status="failed"
            )

        assert "Repository clone" in caplog.text
        assert "failed" in caplog.text

    def test_log_parse_operation_success(self, caplog):
        """Test parse operation logging (success)."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.DEBUG)

        with caplog.at_level(logging.DEBUG, logger="test"):
            log_parse_operation(logger, "/path/to/Test.java")

        assert "Parsed Java file" in caplog.text
        assert "/path/to/Test.java" in caplog.text

    def test_log_parse_operation_failure(self, caplog):
        """Test parse operation logging (failure)."""
        logger = logging.getLogger("test")
        logger.setLevel(logging.WARNING)

        with caplog.at_level(logging.WARNING, logger="test"):
            log_parse_operation(
                logger, "/path/to/Test.java", status="failed", error="Syntax error"
            )

        assert "Failed to parse Java file" in caplog.text
        assert "/path/to/Test.java" in caplog.text
        assert "Syntax error" in caplog.text

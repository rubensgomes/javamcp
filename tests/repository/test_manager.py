# Generated by Claude
"""
Unit tests for RepositoryManager.
"""

import tempfile
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest

from javamcp.config.schema import RepositoryConfig
from javamcp.repository.exceptions import RepositoryNotFoundError
from javamcp.repository.manager import RepositoryManager


class TestRepositoryManager:
    """Tests for RepositoryManager class."""

    def test_init(self):
        """Test RepositoryManager initialization."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        assert manager.config == config
        assert manager.repositories == {}
        assert manager.indices == {}

    def test_get_repo_name_from_url(self):
        """Test extracting repository name from URL."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        name = manager._get_repo_name_from_url("https://github.com/example/myrepo.git")
        assert name == "myrepo"

        name = manager._get_repo_name_from_url("https://github.com/example/myrepo")
        assert name == "myrepo"

    @patch("javamcp.repository.manager.Path.mkdir")
    @patch("javamcp.repository.manager.Path.exists")
    @patch("javamcp.repository.manager.is_git_repository")
    @patch("javamcp.repository.manager.clone_repository")
    @patch("javamcp.repository.manager.get_current_commit_hash")
    def test_initialize_repositories_clone_new(
        self,
        mock_commit_hash,
        mock_clone,
        mock_is_git,
        mock_exists,
        mock_mkdir,
    ):
        """Test initializing repositories clones new repository."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        mock_exists.return_value = False
        mock_commit_hash.return_value = "abc123"

        manager.initialize_repositories()

        mock_clone.assert_called_once()
        assert "https://github.com/example/repo.git" in manager.repositories

    @patch("javamcp.repository.manager.Path.mkdir")
    @patch("javamcp.repository.manager.Path.exists")
    @patch("javamcp.repository.manager.is_git_repository")
    @patch("javamcp.repository.manager.pull_repository")
    @patch("javamcp.repository.manager.get_current_commit_hash")
    def test_initialize_repositories_update_existing(
        self,
        mock_commit_hash,
        mock_pull,
        mock_is_git,
        mock_exists,
        mock_mkdir,
    ):
        """Test initializing repositories updates existing repository."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
            auto_update=True,
        )
        manager = RepositoryManager(config)

        mock_exists.return_value = True
        mock_is_git.return_value = True
        mock_commit_hash.return_value = "abc123"

        manager.initialize_repositories()

        mock_pull.assert_called_once()
        assert "https://github.com/example/repo.git" in manager.repositories

    @patch("javamcp.repository.manager.Path.mkdir")
    @patch("javamcp.repository.manager.Path.exists")
    @patch("javamcp.repository.manager.is_git_repository")
    @patch("javamcp.repository.manager.get_current_commit_hash")
    def test_initialize_repositories_no_update(
        self,
        mock_commit_hash,
        mock_is_git,
        mock_exists,
        mock_mkdir,
    ):
        """Test initializing repositories without auto-update."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
            auto_update=False,
        )
        manager = RepositoryManager(config)

        mock_exists.return_value = True
        mock_is_git.return_value = True
        mock_commit_hash.return_value = "abc123"

        manager.initialize_repositories()

        assert "https://github.com/example/repo.git" in manager.repositories

    @patch("javamcp.repository.manager.Path.mkdir")
    @patch("javamcp.repository.manager.Path.exists")
    @patch("javamcp.repository.manager.clone_repository")
    @patch("javamcp.repository.manager.get_current_commit_hash")
    def test_clone_all_repositories(
        self, mock_commit_hash, mock_clone, mock_exists, mock_mkdir
    ):
        """Test cloning all repositories."""
        config = RepositoryConfig(
            urls=[
                "https://github.com/example/repo1.git",
                "https://github.com/example/repo2.git",
            ],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        mock_exists.return_value = False
        mock_commit_hash.return_value = "abc123"

        manager.clone_all_repositories()

        assert mock_clone.call_count == 2
        assert len(manager.repositories) == 2

    def test_update_repository_not_found(self):
        """Test updating non-existent repository raises error."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        with pytest.raises(RepositoryNotFoundError, match="not managed"):
            manager.update_repository("https://github.com/other/repo.git")

    @patch("javamcp.repository.manager.pull_repository")
    @patch("javamcp.repository.manager.get_current_commit_hash")
    def test_update_repository_success(self, mock_commit_hash, mock_pull):
        """Test updating existing repository."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        from javamcp.models.repository import RepositoryMetadata

        metadata = RepositoryMetadata(
            url="https://github.com/example/repo.git",
            branch="main",
            local_path="/tmp/repos/repo",
        )
        manager.repositories["https://github.com/example/repo.git"] = metadata

        mock_commit_hash.return_value = "def456"

        manager.update_repository("https://github.com/example/repo.git")

        mock_pull.assert_called_once_with("/tmp/repos/repo")

    def test_get_java_files_not_found(self):
        """Test getting Java files from non-existent repository raises error."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        with pytest.raises(RepositoryNotFoundError, match="not managed"):
            manager.get_java_files("https://github.com/other/repo.git")

    def test_get_java_files_success(self):
        """Test getting Java files from repository."""
        with tempfile.TemporaryDirectory() as tmpdir:
            config = RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path=tmpdir,
            )
            manager = RepositoryManager(config)

            # Create mock repository structure
            repo_path = Path(tmpdir) / "test_repo"
            repo_path.mkdir()
            (repo_path / "Test.java").touch()
            (repo_path / "src").mkdir()
            (repo_path / "src" / "Main.java").touch()

            from javamcp.models.repository import RepositoryMetadata

            metadata = RepositoryMetadata(
                url="https://github.com/example/repo.git",
                branch="main",
                local_path=str(repo_path),
            )
            manager.repositories["https://github.com/example/repo.git"] = metadata

            java_files = manager.get_java_files("https://github.com/example/repo.git")

            assert len(java_files) == 2

    def test_filter_java_files_by_package(self):
        """Test filtering Java files by package path."""
        with tempfile.TemporaryDirectory() as tmpdir:
            config = RepositoryConfig(
                urls=["https://github.com/example/repo.git"],
                local_base_path=tmpdir,
            )
            manager = RepositoryManager(config)

            # Create mock repository structure
            repo_path = Path(tmpdir) / "test_repo"
            repo_path.mkdir()
            src_path = repo_path / "src" / "com" / "example" / "service"
            src_path.mkdir(parents=True)
            (src_path / "UserService.java").touch()
            (repo_path / "Other.java").touch()

            from javamcp.models.repository import RepositoryMetadata

            metadata = RepositoryMetadata(
                url="https://github.com/example/repo.git",
                branch="main",
                local_path=str(repo_path),
            )
            manager.repositories["https://github.com/example/repo.git"] = metadata

            filtered_files = manager.filter_java_files_by_package(
                "https://github.com/example/repo.git", "service"
            )

            assert len(filtered_files) == 1
            assert "UserService.java" in str(filtered_files[0])

    def test_get_repository_metadata(self):
        """Test getting repository metadata."""
        config = RepositoryConfig(
            urls=["https://github.com/example/repo.git"],
            local_base_path="/tmp/repos",
        )
        manager = RepositoryManager(config)

        from javamcp.models.repository import RepositoryMetadata

        metadata = RepositoryMetadata(
            url="https://github.com/example/repo.git",
            branch="main",
            local_path="/tmp/repos/repo",
        )
        manager.repositories["https://github.com/example/repo.git"] = metadata

        result = manager.get_repository_metadata("https://github.com/example/repo.git")

        assert result == metadata

        # Test non-existent repository
        result = manager.get_repository_metadata("https://github.com/other/repo.git")
        assert result is None

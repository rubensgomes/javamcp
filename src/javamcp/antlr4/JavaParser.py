# Generated from JavaParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .JavaParserBase import JavaParserBase
else:
    from JavaParserBase import JavaParserBase

def serializedATN():
    return [
        4,1,129,1821,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,1,0,3,0,258,8,0,1,0,1,0,5,0,262,8,0,10,0,
        12,0,265,9,0,1,0,1,0,5,0,269,8,0,10,0,12,0,272,9,0,1,0,1,0,1,0,1,
        0,3,0,278,8,0,1,1,5,1,281,8,1,10,1,12,1,284,9,1,1,1,1,1,1,2,5,2,
        289,8,2,10,2,12,2,292,9,2,1,2,1,2,1,2,1,2,1,3,1,3,3,3,300,8,3,1,
        3,1,3,1,3,3,3,305,8,3,1,3,1,3,1,4,5,4,310,8,4,10,4,12,4,313,9,4,
        1,4,1,4,1,4,1,4,1,4,3,4,320,8,4,1,5,1,5,1,5,1,5,1,5,3,5,327,8,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,339,8,6,1,7,1,7,3,7,
        343,8,7,1,8,1,8,1,8,3,8,348,8,8,1,8,1,8,3,8,352,8,8,1,8,1,8,3,8,
        356,8,8,1,8,1,8,3,8,360,8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,368,8,9,
        10,9,12,9,371,9,9,1,9,1,9,1,10,5,10,376,8,10,10,10,12,10,379,9,10,
        1,10,1,10,1,10,5,10,384,8,10,10,10,12,10,387,9,10,1,10,3,10,390,
        8,10,1,11,1,11,1,11,5,11,395,8,11,10,11,12,11,398,9,11,1,12,1,12,
        1,12,1,12,3,12,404,8,12,1,12,1,12,3,12,408,8,12,1,12,3,12,411,8,
        12,1,12,3,12,414,8,12,1,12,1,12,1,13,1,13,1,13,5,13,421,8,13,10,
        13,12,13,424,9,13,1,14,5,14,427,8,14,10,14,12,14,430,9,14,1,14,1,
        14,3,14,434,8,14,1,14,3,14,437,8,14,1,15,1,15,5,15,441,8,15,10,15,
        12,15,444,9,15,1,16,1,16,1,16,3,16,449,8,16,1,16,1,16,3,16,453,8,
        16,1,16,1,16,3,16,457,8,16,1,16,1,16,1,17,1,17,5,17,463,8,17,10,
        17,12,17,466,9,17,1,17,1,17,1,18,1,18,5,18,472,8,18,10,18,12,18,
        475,9,18,1,18,1,18,1,19,1,19,3,19,481,8,19,1,19,1,19,5,19,485,8,
        19,10,19,12,19,488,9,19,1,19,3,19,491,8,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,3,20,503,8,20,1,21,1,21,1,21,1,21,1,
        21,5,21,510,8,21,10,21,12,21,513,9,21,1,21,1,21,3,21,517,8,21,1,
        21,1,21,1,22,1,22,3,22,523,8,22,1,23,1,23,3,23,527,8,23,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,539,8,26,1,26,1,26,
        1,27,5,27,544,8,27,10,27,12,27,547,9,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,29,5,29,557,8,29,10,29,12,29,560,9,29,1,29,1,29,3,29,
        564,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,574,8,30,1,
        31,1,31,1,31,1,31,5,31,580,8,31,10,31,12,31,583,9,31,1,31,1,31,1,
        32,1,32,1,32,5,32,590,8,32,10,32,12,32,593,9,32,1,32,1,32,1,32,1,
        33,5,33,599,8,33,10,33,12,33,602,9,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,612,8,34,1,35,5,35,615,8,35,10,35,12,35,618,9,
        35,1,35,1,35,1,35,1,36,5,36,624,8,36,10,36,12,36,627,9,36,1,36,1,
        36,1,36,1,36,1,36,5,36,634,8,36,10,36,12,36,637,9,36,1,36,1,36,3,
        36,641,8,36,1,36,1,36,1,37,1,37,1,37,5,37,648,8,37,10,37,12,37,651,
        9,37,1,38,1,38,1,38,3,38,656,8,38,1,39,1,39,1,39,5,39,661,8,39,10,
        39,12,39,664,9,39,1,40,1,40,3,40,668,8,40,1,41,1,41,1,41,1,41,5,
        41,674,8,41,10,41,12,41,677,9,41,1,41,3,41,680,8,41,3,41,682,8,41,
        1,41,1,41,1,42,1,42,3,42,688,8,42,1,42,1,42,5,42,692,8,42,10,42,
        12,42,695,9,42,1,42,1,42,3,42,699,8,42,1,43,1,43,5,43,703,8,43,10,
        43,12,43,706,9,43,1,43,1,43,1,43,3,43,711,8,43,3,43,713,8,43,1,44,
        1,44,1,44,5,44,718,8,44,10,44,12,44,721,9,44,1,45,1,45,3,45,725,
        8,45,1,45,1,45,1,45,3,45,730,8,45,1,45,3,45,733,8,45,3,45,735,8,
        45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,743,8,46,10,46,12,46,746,9,
        46,1,46,1,46,1,47,1,47,1,47,5,47,753,8,47,10,47,12,47,756,9,47,1,
        47,1,47,3,47,760,8,47,1,47,3,47,763,8,47,1,48,5,48,766,8,48,10,48,
        12,48,769,9,48,1,48,1,48,1,48,1,49,5,49,775,8,49,10,49,12,49,778,
        9,49,1,49,1,49,5,49,782,8,49,10,49,12,49,785,9,49,1,49,1,49,1,49,
        1,50,1,50,1,50,5,50,793,8,50,10,50,12,50,796,9,50,1,51,5,51,799,
        8,51,10,51,12,51,802,9,51,1,51,1,51,1,51,1,52,1,52,1,52,5,52,810,
        8,52,10,52,12,52,813,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
        822,8,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,5,56,831,8,56,10,56,
        12,56,834,9,56,1,56,1,56,1,56,1,57,1,57,1,57,3,57,842,8,57,1,57,
        1,57,1,57,3,57,847,8,57,1,57,3,57,850,8,57,1,58,1,58,1,58,5,58,855,
        8,58,10,58,12,58,858,9,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,
        867,8,60,1,61,1,61,1,61,1,61,5,61,873,8,61,10,61,12,61,876,9,61,
        3,61,878,8,61,1,61,3,61,881,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,
        62,1,63,1,63,5,63,892,8,63,10,63,12,63,895,9,63,1,63,1,63,1,64,5,
        64,900,8,64,10,64,12,64,903,9,64,1,64,1,64,3,64,907,8,64,1,65,1,
        65,1,65,1,65,1,65,1,65,3,65,915,8,65,1,65,1,65,3,65,919,8,65,1,65,
        1,65,3,65,923,8,65,1,65,1,65,3,65,927,8,65,1,65,1,65,3,65,931,8,
        65,3,65,933,8,65,1,66,1,66,3,66,937,8,66,1,67,1,67,1,67,1,67,3,67,
        943,8,67,1,68,1,68,1,69,1,69,1,69,1,70,5,70,951,8,70,10,70,12,70,
        954,9,70,1,70,3,70,957,8,70,1,70,1,70,1,70,1,70,5,70,963,8,70,10,
        70,12,70,966,9,70,1,70,1,70,1,71,1,71,5,71,972,8,71,10,71,12,71,
        975,9,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,986,8,
        71,10,71,12,71,989,9,71,3,71,991,8,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,5,71,1001,8,71,10,71,12,71,1004,9,71,3,71,1006,8,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,
        1020,8,71,10,71,12,71,1023,9,71,1,71,1,71,3,71,1027,8,71,1,72,1,
        72,1,73,1,73,1,73,3,73,1034,8,73,1,73,1,73,1,73,3,73,1039,8,73,1,
        73,1,73,1,74,1,74,3,74,1045,8,74,1,74,1,74,1,75,1,75,1,75,5,75,1052,
        8,75,10,75,12,75,1055,9,75,1,75,1,75,1,76,5,76,1060,8,76,10,76,12,
        76,1063,9,76,1,76,1,76,5,76,1067,8,76,10,76,12,76,1070,9,76,1,76,
        3,76,1073,8,76,1,76,1,76,1,77,1,77,1,77,5,77,1080,8,77,10,77,12,
        77,1083,9,77,1,77,1,77,1,78,1,78,5,78,1089,8,78,10,78,12,78,1092,
        9,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,3,79,1101,8,79,1,80,5,80,
        1104,8,80,10,80,12,80,1107,9,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,3,80,1117,8,80,1,81,1,81,1,82,1,82,1,83,5,83,1124,8,83,10,
        83,12,83,1127,9,83,1,83,1,83,1,83,1,83,3,83,1133,8,83,1,84,1,84,
        1,84,1,84,1,84,3,84,1140,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,3,84,1151,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,4,84,1176,8,84,11,84,12,84,1177,1,84,3,84,1181,8,84,1,
        84,3,84,1184,8,84,1,84,1,84,1,84,1,84,5,84,1190,8,84,10,84,12,84,
        1193,9,84,1,84,3,84,1196,8,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,
        1204,8,84,10,84,12,84,1207,9,84,1,84,5,84,1210,8,84,10,84,12,84,
        1213,9,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
        1225,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1234,8,84,1,84,
        1,84,1,84,3,84,1239,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,3,84,1252,8,84,1,84,1,84,1,84,1,84,3,84,1258,8,84,
        1,85,1,85,1,85,5,85,1263,8,85,10,85,12,85,1266,9,85,1,85,1,85,1,
        85,1,85,1,85,1,86,1,86,1,86,5,86,1276,8,86,10,86,12,86,1279,9,86,
        1,87,1,87,1,87,1,88,1,88,1,88,3,88,1287,8,88,1,88,1,88,1,89,1,89,
        1,89,5,89,1294,8,89,10,89,12,89,1297,9,89,1,90,5,90,1300,8,90,10,
        90,12,90,1303,9,90,1,90,1,90,1,90,1,90,1,90,3,90,1310,8,90,1,90,
        1,90,1,90,1,90,3,90,1316,8,90,1,91,1,91,1,91,4,91,1321,8,91,11,91,
        12,91,1322,1,91,4,91,1326,8,91,11,91,12,91,1327,1,92,1,92,1,92,1,
        92,1,92,1,92,3,92,1336,8,92,1,92,3,92,1339,8,92,1,93,1,93,3,93,1343,
        8,93,1,93,1,93,3,93,1347,8,93,1,93,1,93,3,93,1351,8,93,3,93,1353,
        8,93,1,94,1,94,3,94,1357,8,94,1,95,5,95,1360,8,95,10,95,12,95,1363,
        9,95,1,95,1,95,3,95,1367,8,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,
        5,96,1376,8,96,10,96,12,96,1379,9,96,1,97,1,97,1,97,3,97,1384,8,
        97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1394,8,98,1,98,1,
        98,3,98,1398,8,98,1,98,1,98,1,98,3,98,1403,8,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,5,98,1412,8,98,10,98,12,98,1415,9,98,1,98,1,98,
        1,98,5,98,1420,8,98,10,98,12,98,1423,9,98,1,98,1,98,1,98,1,98,1,
        98,1,98,3,98,1431,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,3,98,1447,8,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,
        98,1492,8,98,1,98,1,98,1,98,1,98,3,98,1498,8,98,1,98,1,98,1,98,3,
        98,1503,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1512,8,98,5,
        98,1514,8,98,10,98,12,98,1517,9,98,1,99,5,99,1520,8,99,10,99,12,
        99,1523,9,99,1,99,1,99,5,99,1527,8,99,10,99,12,99,1530,9,99,1,99,
        1,99,1,99,1,99,1,99,3,99,1537,8,99,1,99,1,99,3,99,1541,8,99,1,100,
        1,100,1,100,5,100,1546,8,100,10,100,12,100,1549,9,100,1,101,1,101,
        1,102,1,102,1,102,1,102,1,103,1,103,1,103,3,103,1560,8,103,1,103,
        1,103,1,103,1,103,1,103,5,103,1567,8,103,10,103,12,103,1570,9,103,
        1,103,1,103,1,103,1,103,3,103,1576,8,103,1,103,3,103,1579,8,103,
        1,104,1,104,3,104,1583,8,104,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,
        1601,8,105,3,105,1603,8,105,1,106,1,106,1,106,1,106,1,106,1,106,
        5,106,1611,8,106,10,106,12,106,1614,9,106,1,106,1,106,1,107,1,107,
        1,107,1,107,1,107,3,107,1623,8,107,1,107,1,107,1,107,5,107,1628,
        8,107,10,107,12,107,1631,9,107,1,107,3,107,1634,8,107,3,107,1636,
        8,107,1,107,1,107,1,107,1,107,1,107,3,107,1643,8,107,1,108,1,108,
        1,108,1,109,1,109,1,110,1,110,5,110,1652,8,110,10,110,12,110,1655,
        9,110,3,110,1657,8,110,1,111,1,111,1,111,3,111,1662,8,111,1,111,
        5,111,1665,8,111,10,111,12,111,1668,9,111,1,111,1,111,3,111,1672,
        8,111,1,112,3,112,1675,8,112,1,112,1,112,1,112,1,112,1,112,1,112,
        3,112,1683,8,112,1,113,1,113,3,113,1687,8,113,1,113,1,113,1,113,
        3,113,1692,8,113,5,113,1694,8,113,10,113,12,113,1697,9,113,1,113,
        3,113,1700,8,113,1,114,1,114,3,114,1704,8,114,1,114,1,114,1,115,
        1,115,4,115,1710,8,115,11,115,12,115,1711,1,115,1,115,1,115,1,115,
        1,115,4,115,1719,8,115,11,115,12,115,1720,1,115,1,115,5,115,1725,
        8,115,10,115,12,115,1728,9,115,3,115,1730,8,115,1,116,1,116,3,116,
        1734,8,116,1,117,1,117,1,117,1,118,1,118,1,118,3,118,1742,8,118,
        1,119,1,119,1,119,3,119,1747,8,119,1,120,1,120,1,120,1,120,1,121,
        1,121,1,121,5,121,1756,8,121,10,121,12,121,1759,9,121,1,122,5,122,
        1762,8,122,10,122,12,122,1765,9,122,1,122,1,122,3,122,1769,8,122,
        1,122,5,122,1772,8,122,10,122,12,122,1775,9,122,1,122,1,122,5,122,
        1779,8,122,10,122,12,122,1782,9,122,1,123,1,123,1,124,1,124,1,124,
        1,124,5,124,1790,8,124,10,124,12,124,1793,9,124,1,124,1,124,1,125,
        1,125,1,125,3,125,1800,8,125,1,125,1,125,3,125,1804,8,125,3,125,
        1806,8,125,1,126,1,126,1,126,1,126,1,126,3,126,1813,8,126,1,127,
        1,127,3,127,1817,8,127,1,127,1,127,1,127,0,1,196,128,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,0,15,2,0,
        18,18,50,50,1,0,68,71,1,0,72,73,2,0,48,48,58,58,13,0,17,17,31,31,
        35,36,38,38,41,41,43,44,46,46,56,56,58,58,60,61,64,64,66,67,129,
        129,12,0,17,17,31,31,35,36,38,38,41,41,43,44,46,46,56,56,58,58,60,
        60,66,66,129,129,2,0,91,92,101,104,2,0,105,106,110,110,1,0,103,104,
        2,0,89,90,96,97,2,0,95,95,98,98,2,0,88,88,111,121,1,0,101,102,2,
        0,94,94,122,122,8,0,3,3,5,5,8,8,14,14,21,21,28,28,30,30,47,47,2025,
        0,277,1,0,0,0,2,282,1,0,0,0,4,290,1,0,0,0,6,297,1,0,0,0,8,311,1,
        0,0,0,10,326,1,0,0,0,12,338,1,0,0,0,14,342,1,0,0,0,16,344,1,0,0,
        0,18,363,1,0,0,0,20,377,1,0,0,0,22,391,1,0,0,0,24,399,1,0,0,0,26,
        417,1,0,0,0,28,428,1,0,0,0,30,438,1,0,0,0,32,445,1,0,0,0,34,460,
        1,0,0,0,36,469,1,0,0,0,38,490,1,0,0,0,40,502,1,0,0,0,42,504,1,0,
        0,0,44,522,1,0,0,0,46,526,1,0,0,0,48,528,1,0,0,0,50,531,1,0,0,0,
        52,534,1,0,0,0,54,545,1,0,0,0,56,551,1,0,0,0,58,563,1,0,0,0,60,573,
        1,0,0,0,62,575,1,0,0,0,64,586,1,0,0,0,66,600,1,0,0,0,68,611,1,0,
        0,0,70,616,1,0,0,0,72,625,1,0,0,0,74,644,1,0,0,0,76,652,1,0,0,0,
        78,657,1,0,0,0,80,667,1,0,0,0,82,669,1,0,0,0,84,693,1,0,0,0,86,712,
        1,0,0,0,88,714,1,0,0,0,90,722,1,0,0,0,92,738,1,0,0,0,94,762,1,0,
        0,0,96,767,1,0,0,0,98,776,1,0,0,0,100,789,1,0,0,0,102,800,1,0,0,
        0,104,806,1,0,0,0,106,821,1,0,0,0,108,823,1,0,0,0,110,825,1,0,0,
        0,112,832,1,0,0,0,114,841,1,0,0,0,116,851,1,0,0,0,118,859,1,0,0,
        0,120,866,1,0,0,0,122,868,1,0,0,0,124,884,1,0,0,0,126,889,1,0,0,
        0,128,906,1,0,0,0,130,932,1,0,0,0,132,936,1,0,0,0,134,938,1,0,0,
        0,136,944,1,0,0,0,138,946,1,0,0,0,140,952,1,0,0,0,142,1026,1,0,0,
        0,144,1028,1,0,0,0,146,1030,1,0,0,0,148,1042,1,0,0,0,150,1048,1,
        0,0,0,152,1061,1,0,0,0,154,1076,1,0,0,0,156,1086,1,0,0,0,158,1100,
        1,0,0,0,160,1105,1,0,0,0,162,1118,1,0,0,0,164,1120,1,0,0,0,166,1125,
        1,0,0,0,168,1257,1,0,0,0,170,1259,1,0,0,0,172,1272,1,0,0,0,174,1280,
        1,0,0,0,176,1283,1,0,0,0,178,1290,1,0,0,0,180,1315,1,0,0,0,182,1320,
        1,0,0,0,184,1338,1,0,0,0,186,1352,1,0,0,0,188,1356,1,0,0,0,190,1361,
        1,0,0,0,192,1372,1,0,0,0,194,1383,1,0,0,0,196,1430,1,0,0,0,198,1540,
        1,0,0,0,200,1542,1,0,0,0,202,1550,1,0,0,0,204,1552,1,0,0,0,206,1578,
        1,0,0,0,208,1582,1,0,0,0,210,1602,1,0,0,0,212,1604,1,0,0,0,214,1642,
        1,0,0,0,216,1644,1,0,0,0,218,1647,1,0,0,0,220,1656,1,0,0,0,222,1661,
        1,0,0,0,224,1682,1,0,0,0,226,1699,1,0,0,0,228,1701,1,0,0,0,230,1729,
        1,0,0,0,232,1731,1,0,0,0,234,1735,1,0,0,0,236,1741,1,0,0,0,238,1746,
        1,0,0,0,240,1748,1,0,0,0,242,1752,1,0,0,0,244,1763,1,0,0,0,246,1783,
        1,0,0,0,248,1785,1,0,0,0,250,1805,1,0,0,0,252,1812,1,0,0,0,254,1814,
        1,0,0,0,256,258,3,4,2,0,257,256,1,0,0,0,257,258,1,0,0,0,258,263,
        1,0,0,0,259,262,3,6,3,0,260,262,5,85,0,0,261,259,1,0,0,0,261,260,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,270,
        1,0,0,0,265,263,1,0,0,0,266,269,3,8,4,0,267,269,5,85,0,0,268,266,
        1,0,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,
        1,0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,278,5,0,0,1,274,275,
        3,2,1,0,275,276,5,0,0,1,276,278,1,0,0,0,277,257,1,0,0,0,277,274,
        1,0,0,0,278,1,1,0,0,0,279,281,3,6,3,0,280,279,1,0,0,0,281,284,1,
        0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,1,
        0,0,0,285,286,3,140,70,0,286,3,1,0,0,0,287,289,3,114,57,0,288,287,
        1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,
        1,0,0,0,292,290,1,0,0,0,293,294,5,37,0,0,294,295,3,104,52,0,295,
        296,5,85,0,0,296,5,1,0,0,0,297,299,5,26,0,0,298,300,5,48,0,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,304,3,104,52,0,302,
        303,5,87,0,0,303,305,5,105,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
        306,1,0,0,0,306,307,5,85,0,0,307,7,1,0,0,0,308,310,3,12,6,0,309,
        308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,
        319,1,0,0,0,313,311,1,0,0,0,314,320,3,16,8,0,315,320,3,24,12,0,316,
        320,3,32,16,0,317,320,3,124,62,0,318,320,3,146,73,0,319,314,1,0,
        0,0,319,315,1,0,0,0,319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,0,
        0,0,320,9,1,0,0,0,321,327,3,12,6,0,322,327,5,32,0,0,323,327,5,52,
        0,0,324,327,5,57,0,0,325,327,5,63,0,0,326,321,1,0,0,0,326,322,1,
        0,0,0,326,323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,11,1,0,
        0,0,328,339,3,114,57,0,329,339,5,42,0,0,330,339,5,40,0,0,331,339,
        5,39,0,0,332,339,5,48,0,0,333,339,5,1,0,0,334,339,5,19,0,0,335,339,
        5,49,0,0,336,339,5,46,0,0,337,339,5,34,0,0,338,328,1,0,0,0,338,329,
        1,0,0,0,338,330,1,0,0,0,338,331,1,0,0,0,338,332,1,0,0,0,338,333,
        1,0,0,0,338,334,1,0,0,0,338,335,1,0,0,0,338,336,1,0,0,0,338,337,
        1,0,0,0,339,13,1,0,0,0,340,343,5,19,0,0,341,343,3,114,57,0,342,340,
        1,0,0,0,342,341,1,0,0,0,343,15,1,0,0,0,344,345,5,9,0,0,345,347,3,
        162,81,0,346,348,3,18,9,0,347,346,1,0,0,0,347,348,1,0,0,0,348,351,
        1,0,0,0,349,350,5,18,0,0,350,352,3,244,122,0,351,349,1,0,0,0,351,
        352,1,0,0,0,352,355,1,0,0,0,353,354,5,25,0,0,354,356,3,242,121,0,
        355,353,1,0,0,0,355,356,1,0,0,0,356,359,1,0,0,0,357,358,5,38,0,0,
        358,360,3,242,121,0,359,357,1,0,0,0,359,360,1,0,0,0,360,361,1,0,
        0,0,361,362,3,34,17,0,362,17,1,0,0,0,363,364,5,90,0,0,364,369,3,
        20,10,0,365,366,5,86,0,0,366,368,3,20,10,0,367,365,1,0,0,0,368,371,
        1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,
        1,0,0,0,372,373,5,89,0,0,373,19,1,0,0,0,374,376,3,114,57,0,375,374,
        1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,
        1,0,0,0,379,377,1,0,0,0,380,389,3,162,81,0,381,385,5,18,0,0,382,
        384,3,114,57,0,383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,
        386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,390,3,22,11,0,389,
        381,1,0,0,0,389,390,1,0,0,0,390,21,1,0,0,0,391,396,3,244,122,0,392,
        393,5,107,0,0,393,395,3,244,122,0,394,392,1,0,0,0,395,398,1,0,0,
        0,396,394,1,0,0,0,396,397,1,0,0,0,397,23,1,0,0,0,398,396,1,0,0,0,
        399,400,5,16,0,0,400,403,3,162,81,0,401,402,5,25,0,0,402,404,3,242,
        121,0,403,401,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,5,
        81,0,0,406,408,3,26,13,0,407,406,1,0,0,0,407,408,1,0,0,0,408,410,
        1,0,0,0,409,411,5,86,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,413,
        1,0,0,0,412,414,3,30,15,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,
        1,0,0,0,415,416,5,82,0,0,416,25,1,0,0,0,417,422,3,28,14,0,418,419,
        5,86,0,0,419,421,3,28,14,0,420,418,1,0,0,0,421,424,1,0,0,0,422,420,
        1,0,0,0,422,423,1,0,0,0,423,27,1,0,0,0,424,422,1,0,0,0,425,427,3,
        114,57,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,
        1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,433,3,162,81,0,432,434,
        3,254,127,0,433,432,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,
        437,3,34,17,0,436,435,1,0,0,0,436,437,1,0,0,0,437,29,1,0,0,0,438,
        442,5,85,0,0,439,441,3,38,19,0,440,439,1,0,0,0,441,444,1,0,0,0,442,
        440,1,0,0,0,442,443,1,0,0,0,443,31,1,0,0,0,444,442,1,0,0,0,445,446,
        5,29,0,0,446,448,3,162,81,0,447,449,3,18,9,0,448,447,1,0,0,0,448,
        449,1,0,0,0,449,452,1,0,0,0,450,451,5,18,0,0,451,453,3,242,121,0,
        452,450,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,455,5,38,0,0,
        455,457,3,242,121,0,456,454,1,0,0,0,456,457,1,0,0,0,457,458,1,0,
        0,0,458,459,3,36,18,0,459,33,1,0,0,0,460,464,5,81,0,0,461,463,3,
        38,19,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,
        1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,5,82,0,0,468,35,
        1,0,0,0,469,473,5,81,0,0,470,472,3,58,29,0,471,470,1,0,0,0,472,475,
        1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,
        1,0,0,0,476,477,5,82,0,0,477,37,1,0,0,0,478,491,5,85,0,0,479,481,
        5,48,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,491,
        3,156,78,0,483,485,3,10,5,0,484,483,1,0,0,0,485,488,1,0,0,0,486,
        484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,0,0,489,
        491,3,40,20,0,490,478,1,0,0,0,490,480,1,0,0,0,490,486,1,0,0,0,491,
        39,1,0,0,0,492,503,3,146,73,0,493,503,3,42,21,0,494,503,3,48,24,
        0,495,503,3,56,28,0,496,503,3,52,26,0,497,503,3,50,25,0,498,503,
        3,32,16,0,499,503,3,124,62,0,500,503,3,16,8,0,501,503,3,24,12,0,
        502,492,1,0,0,0,502,493,1,0,0,0,502,494,1,0,0,0,502,495,1,0,0,0,
        502,496,1,0,0,0,502,497,1,0,0,0,502,498,1,0,0,0,502,499,1,0,0,0,
        502,500,1,0,0,0,502,501,1,0,0,0,503,41,1,0,0,0,504,505,3,46,23,0,
        505,506,3,162,81,0,506,511,3,90,45,0,507,508,5,83,0,0,508,510,5,
        84,0,0,509,507,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,
        0,0,0,512,516,1,0,0,0,513,511,1,0,0,0,514,515,5,55,0,0,515,517,3,
        88,44,0,516,514,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,
        3,44,22,0,519,43,1,0,0,0,520,523,3,156,78,0,521,523,5,85,0,0,522,
        520,1,0,0,0,522,521,1,0,0,0,523,45,1,0,0,0,524,527,3,244,122,0,525,
        527,5,62,0,0,526,524,1,0,0,0,526,525,1,0,0,0,527,47,1,0,0,0,528,
        529,3,18,9,0,529,530,3,42,21,0,530,49,1,0,0,0,531,532,3,18,9,0,532,
        533,3,52,26,0,533,51,1,0,0,0,534,535,3,162,81,0,535,538,3,90,45,
        0,536,537,5,55,0,0,537,539,3,88,44,0,538,536,1,0,0,0,538,539,1,0,
        0,0,539,540,1,0,0,0,540,541,3,156,78,0,541,53,1,0,0,0,542,544,3,
        10,5,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,
        0,0,0,546,548,1,0,0,0,547,545,1,0,0,0,548,549,3,162,81,0,549,550,
        3,156,78,0,550,55,1,0,0,0,551,552,3,244,122,0,552,553,3,74,37,0,
        553,554,5,85,0,0,554,57,1,0,0,0,555,557,3,10,5,0,556,555,1,0,0,0,
        557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,
        560,558,1,0,0,0,561,564,3,60,30,0,562,564,5,85,0,0,563,558,1,0,0,
        0,563,562,1,0,0,0,564,59,1,0,0,0,565,574,3,146,73,0,566,574,3,62,
        31,0,567,574,3,66,33,0,568,574,3,70,35,0,569,574,3,32,16,0,570,574,
        3,124,62,0,571,574,3,16,8,0,572,574,3,24,12,0,573,565,1,0,0,0,573,
        566,1,0,0,0,573,567,1,0,0,0,573,568,1,0,0,0,573,569,1,0,0,0,573,
        570,1,0,0,0,573,571,1,0,0,0,573,572,1,0,0,0,574,61,1,0,0,0,575,576,
        3,244,122,0,576,581,3,64,32,0,577,578,5,86,0,0,578,580,3,64,32,0,
        579,577,1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,
        582,584,1,0,0,0,583,581,1,0,0,0,584,585,5,85,0,0,585,63,1,0,0,0,
        586,591,3,162,81,0,587,588,5,83,0,0,588,590,5,84,0,0,589,587,1,0,
        0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,
        0,0,593,591,1,0,0,0,594,595,5,88,0,0,595,596,3,80,40,0,596,65,1,
        0,0,0,597,599,3,68,34,0,598,597,1,0,0,0,599,602,1,0,0,0,600,598,
        1,0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,600,1,0,0,0,603,604,
        3,72,36,0,604,67,1,0,0,0,605,612,3,114,57,0,606,612,5,42,0,0,607,
        612,5,1,0,0,608,612,5,12,0,0,609,612,5,48,0,0,610,612,5,49,0,0,611,
        605,1,0,0,0,611,606,1,0,0,0,611,607,1,0,0,0,611,608,1,0,0,0,611,
        609,1,0,0,0,611,610,1,0,0,0,612,69,1,0,0,0,613,615,3,68,34,0,614,
        613,1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,
        619,1,0,0,0,618,616,1,0,0,0,619,620,3,18,9,0,620,621,3,72,36,0,621,
        71,1,0,0,0,622,624,3,114,57,0,623,622,1,0,0,0,624,627,1,0,0,0,625,
        623,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,
        629,3,46,23,0,629,630,3,162,81,0,630,635,3,90,45,0,631,632,5,83,
        0,0,632,634,5,84,0,0,633,631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,
        0,0,635,636,1,0,0,0,636,640,1,0,0,0,637,635,1,0,0,0,638,639,5,55,
        0,0,639,641,3,88,44,0,640,638,1,0,0,0,640,641,1,0,0,0,641,642,1,
        0,0,0,642,643,3,44,22,0,643,73,1,0,0,0,644,649,3,76,38,0,645,646,
        5,86,0,0,646,648,3,76,38,0,647,645,1,0,0,0,648,651,1,0,0,0,649,647,
        1,0,0,0,649,650,1,0,0,0,650,75,1,0,0,0,651,649,1,0,0,0,652,655,3,
        78,39,0,653,654,5,88,0,0,654,656,3,80,40,0,655,653,1,0,0,0,655,656,
        1,0,0,0,656,77,1,0,0,0,657,662,3,162,81,0,658,659,5,83,0,0,659,661,
        5,84,0,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,
        1,0,0,0,663,79,1,0,0,0,664,662,1,0,0,0,665,668,3,82,41,0,666,668,
        3,196,98,0,667,665,1,0,0,0,667,666,1,0,0,0,668,81,1,0,0,0,669,681,
        5,81,0,0,670,675,3,80,40,0,671,672,5,86,0,0,672,674,3,80,40,0,673,
        671,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,
        679,1,0,0,0,677,675,1,0,0,0,678,680,5,86,0,0,679,678,1,0,0,0,679,
        680,1,0,0,0,680,682,1,0,0,0,681,670,1,0,0,0,681,682,1,0,0,0,682,
        683,1,0,0,0,683,684,5,82,0,0,684,83,1,0,0,0,685,687,3,162,81,0,686,
        688,3,248,124,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,
        689,690,5,87,0,0,690,692,1,0,0,0,691,685,1,0,0,0,692,695,1,0,0,0,
        693,691,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,
        696,698,3,164,82,0,697,699,3,248,124,0,698,697,1,0,0,0,698,699,1,
        0,0,0,699,85,1,0,0,0,700,713,3,244,122,0,701,703,3,114,57,0,702,
        701,1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,
        707,1,0,0,0,706,704,1,0,0,0,707,710,5,93,0,0,708,709,7,0,0,0,709,
        711,3,244,122,0,710,708,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,
        712,700,1,0,0,0,712,704,1,0,0,0,713,87,1,0,0,0,714,719,3,104,52,
        0,715,716,5,86,0,0,716,718,3,104,52,0,717,715,1,0,0,0,718,721,1,
        0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,89,1,0,0,0,721,719,1,0,
        0,0,722,734,5,79,0,0,723,725,3,92,46,0,724,723,1,0,0,0,724,725,1,
        0,0,0,725,735,1,0,0,0,726,729,3,92,46,0,727,728,5,86,0,0,728,730,
        3,94,47,0,729,727,1,0,0,0,729,730,1,0,0,0,730,735,1,0,0,0,731,733,
        3,94,47,0,732,731,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,724,
        1,0,0,0,734,726,1,0,0,0,734,732,1,0,0,0,735,736,1,0,0,0,736,737,
        5,80,0,0,737,91,1,0,0,0,738,744,3,244,122,0,739,740,3,162,81,0,740,
        741,5,87,0,0,741,743,1,0,0,0,742,739,1,0,0,0,743,746,1,0,0,0,744,
        742,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,744,1,0,0,0,747,
        748,5,53,0,0,748,93,1,0,0,0,749,754,3,96,48,0,750,751,5,86,0,0,751,
        753,3,96,48,0,752,750,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,
        755,1,0,0,0,755,759,1,0,0,0,756,754,1,0,0,0,757,758,5,86,0,0,758,
        760,3,98,49,0,759,757,1,0,0,0,759,760,1,0,0,0,760,763,1,0,0,0,761,
        763,3,98,49,0,762,749,1,0,0,0,762,761,1,0,0,0,763,95,1,0,0,0,764,
        766,3,14,7,0,765,764,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,
        768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,771,3,244,122,0,
        771,772,3,78,39,0,772,97,1,0,0,0,773,775,3,14,7,0,774,773,1,0,0,
        0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,
        0,778,776,1,0,0,0,779,783,3,244,122,0,780,782,3,114,57,0,781,780,
        1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,786,
        1,0,0,0,785,783,1,0,0,0,786,787,5,125,0,0,787,788,3,78,39,0,788,
        99,1,0,0,0,789,794,3,102,51,0,790,791,5,86,0,0,791,793,3,102,51,
        0,792,790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,
        0,795,101,1,0,0,0,796,794,1,0,0,0,797,799,3,14,7,0,798,797,1,0,0,
        0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,803,1,0,0,
        0,802,800,1,0,0,0,803,804,5,61,0,0,804,805,3,162,81,0,805,103,1,
        0,0,0,806,811,3,162,81,0,807,808,5,87,0,0,808,810,3,162,81,0,809,
        807,1,0,0,0,810,813,1,0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,
        105,1,0,0,0,813,811,1,0,0,0,814,822,3,108,54,0,815,822,3,110,55,
        0,816,822,5,75,0,0,817,822,5,76,0,0,818,822,5,74,0,0,819,822,5,78,
        0,0,820,822,5,77,0,0,821,814,1,0,0,0,821,815,1,0,0,0,821,816,1,0,
        0,0,821,817,1,0,0,0,821,818,1,0,0,0,821,819,1,0,0,0,821,820,1,0,
        0,0,822,107,1,0,0,0,823,824,7,1,0,0,824,109,1,0,0,0,825,826,7,2,
        0,0,826,111,1,0,0,0,827,828,3,162,81,0,828,829,5,87,0,0,829,831,
        1,0,0,0,830,827,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,
        1,0,0,0,833,835,1,0,0,0,834,832,1,0,0,0,835,836,5,124,0,0,836,837,
        3,162,81,0,837,113,1,0,0,0,838,839,5,124,0,0,839,842,3,104,52,0,
        840,842,3,112,56,0,841,838,1,0,0,0,841,840,1,0,0,0,842,849,1,0,0,
        0,843,846,5,79,0,0,844,847,3,116,58,0,845,847,3,120,60,0,846,844,
        1,0,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,850,
        5,80,0,0,849,843,1,0,0,0,849,850,1,0,0,0,850,115,1,0,0,0,851,856,
        3,118,59,0,852,853,5,86,0,0,853,855,3,118,59,0,854,852,1,0,0,0,855,
        858,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,117,1,0,0,0,858,
        856,1,0,0,0,859,860,3,162,81,0,860,861,5,88,0,0,861,862,3,120,60,
        0,862,119,1,0,0,0,863,867,3,196,98,0,864,867,3,114,57,0,865,867,
        3,122,61,0,866,863,1,0,0,0,866,864,1,0,0,0,866,865,1,0,0,0,867,121,
        1,0,0,0,868,877,5,81,0,0,869,874,3,120,60,0,870,871,5,86,0,0,871,
        873,3,120,60,0,872,870,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,
        875,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,877,869,1,0,0,0,877,
        878,1,0,0,0,878,880,1,0,0,0,879,881,5,86,0,0,880,879,1,0,0,0,880,
        881,1,0,0,0,881,882,1,0,0,0,882,883,5,82,0,0,883,123,1,0,0,0,884,
        885,5,124,0,0,885,886,5,29,0,0,886,887,3,162,81,0,887,888,3,126,
        63,0,888,125,1,0,0,0,889,893,5,81,0,0,890,892,3,128,64,0,891,890,
        1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,896,
        1,0,0,0,895,893,1,0,0,0,896,897,5,82,0,0,897,127,1,0,0,0,898,900,
        3,10,5,0,899,898,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,
        1,0,0,0,902,904,1,0,0,0,903,901,1,0,0,0,904,907,3,130,65,0,905,907,
        5,85,0,0,906,901,1,0,0,0,906,905,1,0,0,0,907,129,1,0,0,0,908,909,
        3,244,122,0,909,910,3,132,66,0,910,911,5,85,0,0,911,933,1,0,0,0,
        912,914,3,16,8,0,913,915,5,85,0,0,914,913,1,0,0,0,914,915,1,0,0,
        0,915,933,1,0,0,0,916,918,3,32,16,0,917,919,5,85,0,0,918,917,1,0,
        0,0,918,919,1,0,0,0,919,933,1,0,0,0,920,922,3,24,12,0,921,923,5,
        85,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,933,1,0,0,0,924,926,3,
        124,62,0,925,927,5,85,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,933,
        1,0,0,0,928,930,3,146,73,0,929,931,5,85,0,0,930,929,1,0,0,0,930,
        931,1,0,0,0,931,933,1,0,0,0,932,908,1,0,0,0,932,912,1,0,0,0,932,
        916,1,0,0,0,932,920,1,0,0,0,932,924,1,0,0,0,932,928,1,0,0,0,933,
        131,1,0,0,0,934,937,3,134,67,0,935,937,3,136,68,0,936,934,1,0,0,
        0,936,935,1,0,0,0,937,133,1,0,0,0,938,939,3,162,81,0,939,940,5,79,
        0,0,940,942,5,80,0,0,941,943,3,138,69,0,942,941,1,0,0,0,942,943,
        1,0,0,0,943,135,1,0,0,0,944,945,3,74,37,0,945,137,1,0,0,0,946,947,
        5,12,0,0,947,948,3,120,60,0,948,139,1,0,0,0,949,951,3,114,57,0,950,
        949,1,0,0,0,951,954,1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,
        956,1,0,0,0,954,952,1,0,0,0,955,957,5,35,0,0,956,955,1,0,0,0,956,
        957,1,0,0,0,957,958,1,0,0,0,958,959,5,31,0,0,959,960,3,104,52,0,
        960,964,5,81,0,0,961,963,3,142,71,0,962,961,1,0,0,0,963,966,1,0,
        0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,964,1,0,
        0,0,967,968,5,82,0,0,968,141,1,0,0,0,969,973,5,44,0,0,970,972,3,
        144,72,0,971,970,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,974,
        1,0,0,0,974,976,1,0,0,0,975,973,1,0,0,0,976,977,3,104,52,0,977,978,
        5,85,0,0,978,1027,1,0,0,0,979,980,5,17,0,0,980,990,3,104,52,0,981,
        982,5,56,0,0,982,987,3,104,52,0,983,984,5,86,0,0,984,986,3,104,52,
        0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,
        0,988,991,1,0,0,0,989,987,1,0,0,0,990,981,1,0,0,0,990,991,1,0,0,
        0,991,992,1,0,0,0,992,993,5,85,0,0,993,1027,1,0,0,0,994,995,5,36,
        0,0,995,1005,3,104,52,0,996,997,5,56,0,0,997,1002,3,104,52,0,998,
        999,5,86,0,0,999,1001,3,104,52,0,1000,998,1,0,0,0,1001,1004,1,0,
        0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,1006,1,0,0,0,1004,1002,
        1,0,0,0,1005,996,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,
        1008,5,85,0,0,1008,1027,1,0,0,0,1009,1010,5,60,0,0,1010,1011,3,104,
        52,0,1011,1012,5,85,0,0,1012,1027,1,0,0,0,1013,1014,5,41,0,0,1014,
        1015,3,104,52,0,1015,1016,5,66,0,0,1016,1021,3,104,52,0,1017,1018,
        5,86,0,0,1018,1020,3,104,52,0,1019,1017,1,0,0,0,1020,1023,1,0,0,
        0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1021,
        1,0,0,0,1024,1025,5,85,0,0,1025,1027,1,0,0,0,1026,969,1,0,0,0,1026,
        979,1,0,0,0,1026,994,1,0,0,0,1026,1009,1,0,0,0,1026,1013,1,0,0,0,
        1027,143,1,0,0,0,1028,1029,7,3,0,0,1029,145,1,0,0,0,1030,1031,5,
        43,0,0,1031,1033,3,162,81,0,1032,1034,3,18,9,0,1033,1032,1,0,0,0,
        1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1038,3,148,74,0,1036,1037,
        5,25,0,0,1037,1039,3,242,121,0,1038,1036,1,0,0,0,1038,1039,1,0,0,
        0,1039,1040,1,0,0,0,1040,1041,3,154,77,0,1041,147,1,0,0,0,1042,1044,
        5,79,0,0,1043,1045,3,150,75,0,1044,1043,1,0,0,0,1044,1045,1,0,0,
        0,1045,1046,1,0,0,0,1046,1047,5,80,0,0,1047,149,1,0,0,0,1048,1053,
        3,152,76,0,1049,1050,5,86,0,0,1050,1052,3,152,76,0,1051,1049,1,0,
        0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,
        1,0,0,0,1055,1053,1,0,0,0,1056,1057,4,75,0,0,1057,151,1,0,0,0,1058,
        1060,3,114,57,0,1059,1058,1,0,0,0,1060,1063,1,0,0,0,1061,1059,1,
        0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,1061,1,0,0,0,1064,
        1072,3,244,122,0,1065,1067,3,114,57,0,1066,1065,1,0,0,0,1067,1070,
        1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,
        1068,1,0,0,0,1071,1073,5,125,0,0,1072,1068,1,0,0,0,1072,1073,1,0,
        0,0,1073,1074,1,0,0,0,1074,1075,3,162,81,0,1075,153,1,0,0,0,1076,
        1081,5,81,0,0,1077,1080,3,38,19,0,1078,1080,3,54,27,0,1079,1077,
        1,0,0,0,1079,1078,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1081,
        1082,1,0,0,0,1082,1084,1,0,0,0,1083,1081,1,0,0,0,1084,1085,5,82,
        0,0,1085,155,1,0,0,0,1086,1090,5,81,0,0,1087,1089,3,158,79,0,1088,
        1087,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,
        0,1091,1093,1,0,0,0,1092,1090,1,0,0,0,1093,1094,5,82,0,0,1094,157,
        1,0,0,0,1095,1096,3,160,80,0,1096,1097,5,85,0,0,1097,1101,1,0,0,
        0,1098,1101,3,166,83,0,1099,1101,3,168,84,0,1100,1095,1,0,0,0,1100,
        1098,1,0,0,0,1100,1099,1,0,0,0,1101,159,1,0,0,0,1102,1104,3,14,7,
        0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,
        1,0,0,0,1106,1116,1,0,0,0,1107,1105,1,0,0,0,1108,1109,5,61,0,0,1109,
        1110,3,162,81,0,1110,1111,5,88,0,0,1111,1112,3,196,98,0,1112,1117,
        1,0,0,0,1113,1114,3,244,122,0,1114,1115,3,74,37,0,1115,1117,1,0,
        0,0,1116,1108,1,0,0,0,1116,1113,1,0,0,0,1117,161,1,0,0,0,1118,1119,
        7,4,0,0,1119,163,1,0,0,0,1120,1121,7,5,0,0,1121,165,1,0,0,0,1122,
        1124,3,12,6,0,1123,1122,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,
        0,0,1125,1126,1,0,0,0,1126,1132,1,0,0,0,1127,1125,1,0,0,0,1128,1133,
        3,16,8,0,1129,1133,3,32,16,0,1130,1133,3,146,73,0,1131,1133,3,24,
        12,0,1132,1128,1,0,0,0,1132,1129,1,0,0,0,1132,1130,1,0,0,0,1132,
        1131,1,0,0,0,1133,167,1,0,0,0,1134,1258,3,156,78,0,1135,1136,5,2,
        0,0,1136,1139,3,196,98,0,1137,1138,5,94,0,0,1138,1140,3,196,98,0,
        1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,
        5,85,0,0,1142,1258,1,0,0,0,1143,1144,5,24,0,0,1144,1145,5,79,0,0,
        1145,1146,3,196,98,0,1146,1147,5,80,0,0,1147,1150,3,168,84,0,1148,
        1149,5,15,0,0,1149,1151,3,168,84,0,1150,1148,1,0,0,0,1150,1151,1,
        0,0,0,1151,1258,1,0,0,0,1152,1153,5,22,0,0,1153,1154,5,79,0,0,1154,
        1155,3,186,93,0,1155,1156,5,80,0,0,1156,1157,3,168,84,0,1157,1258,
        1,0,0,0,1158,1159,5,65,0,0,1159,1160,5,79,0,0,1160,1161,3,196,98,
        0,1161,1162,5,80,0,0,1162,1163,3,168,84,0,1163,1258,1,0,0,0,1164,
        1165,5,13,0,0,1165,1166,3,168,84,0,1166,1167,5,65,0,0,1167,1168,
        5,79,0,0,1168,1169,3,196,98,0,1169,1170,5,80,0,0,1170,1171,5,85,
        0,0,1171,1258,1,0,0,0,1172,1173,5,59,0,0,1173,1183,3,156,78,0,1174,
        1176,3,170,85,0,1175,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1175,1,
        0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1181,3,174,87,0,1180,
        1179,1,0,0,0,1180,1181,1,0,0,0,1181,1184,1,0,0,0,1182,1184,3,174,
        87,0,1183,1175,1,0,0,0,1183,1182,1,0,0,0,1184,1258,1,0,0,0,1185,
        1186,5,59,0,0,1186,1187,3,176,88,0,1187,1191,3,156,78,0,1188,1190,
        3,170,85,0,1189,1188,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,
        1191,1192,1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,1194,1196,
        3,174,87,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1258,1,0,0,0,
        1197,1198,5,51,0,0,1198,1199,5,79,0,0,1199,1200,3,196,98,0,1200,
        1201,5,80,0,0,1201,1205,5,81,0,0,1202,1204,3,182,91,0,1203,1202,
        1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,
        1211,1,0,0,0,1207,1205,1,0,0,0,1208,1210,3,184,92,0,1209,1208,1,
        0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,
        1214,1,0,0,0,1213,1211,1,0,0,0,1214,1215,5,82,0,0,1215,1258,1,0,
        0,0,1216,1217,5,52,0,0,1217,1218,5,79,0,0,1218,1219,3,196,98,0,1219,
        1220,5,80,0,0,1220,1221,3,156,78,0,1221,1258,1,0,0,0,1222,1224,5,
        45,0,0,1223,1225,3,196,98,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,
        1225,1226,1,0,0,0,1226,1258,5,85,0,0,1227,1228,5,54,0,0,1228,1229,
        3,196,98,0,1229,1230,5,85,0,0,1230,1258,1,0,0,0,1231,1233,5,4,0,
        0,1232,1234,3,162,81,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,
        1235,1,0,0,0,1235,1258,5,85,0,0,1236,1238,5,11,0,0,1237,1239,3,162,
        81,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,
        1258,5,85,0,0,1241,1242,5,67,0,0,1242,1243,3,196,98,0,1243,1244,
        5,85,0,0,1244,1258,1,0,0,0,1245,1258,5,85,0,0,1246,1247,3,196,98,
        0,1247,1248,5,85,0,0,1248,1258,1,0,0,0,1249,1251,3,212,106,0,1250,
        1252,5,85,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1258,1,0,
        0,0,1253,1254,3,162,81,0,1254,1255,5,94,0,0,1255,1256,3,168,84,0,
        1256,1258,1,0,0,0,1257,1134,1,0,0,0,1257,1135,1,0,0,0,1257,1143,
        1,0,0,0,1257,1152,1,0,0,0,1257,1158,1,0,0,0,1257,1164,1,0,0,0,1257,
        1172,1,0,0,0,1257,1185,1,0,0,0,1257,1197,1,0,0,0,1257,1216,1,0,0,
        0,1257,1222,1,0,0,0,1257,1227,1,0,0,0,1257,1231,1,0,0,0,1257,1236,
        1,0,0,0,1257,1241,1,0,0,0,1257,1245,1,0,0,0,1257,1246,1,0,0,0,1257,
        1249,1,0,0,0,1257,1253,1,0,0,0,1258,169,1,0,0,0,1259,1260,5,7,0,
        0,1260,1264,5,79,0,0,1261,1263,3,14,7,0,1262,1261,1,0,0,0,1263,1266,
        1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,1267,1,0,0,0,1266,
        1264,1,0,0,0,1267,1268,3,172,86,0,1268,1269,3,162,81,0,1269,1270,
        5,80,0,0,1270,1271,3,156,78,0,1271,171,1,0,0,0,1272,1277,3,104,52,
        0,1273,1274,5,108,0,0,1274,1276,3,104,52,0,1275,1273,1,0,0,0,1276,
        1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,173,1,0,0,
        0,1279,1277,1,0,0,0,1280,1281,5,20,0,0,1281,1282,3,156,78,0,1282,
        175,1,0,0,0,1283,1284,5,79,0,0,1284,1286,3,178,89,0,1285,1287,5,
        85,0,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,
        1289,5,80,0,0,1289,177,1,0,0,0,1290,1295,3,180,90,0,1291,1292,5,
        85,0,0,1292,1294,3,180,90,0,1293,1291,1,0,0,0,1294,1297,1,0,0,0,
        1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,179,1,0,0,0,1297,1295,1,
        0,0,0,1298,1300,3,14,7,0,1299,1298,1,0,0,0,1300,1303,1,0,0,0,1301,
        1299,1,0,0,0,1301,1302,1,0,0,0,1302,1309,1,0,0,0,1303,1301,1,0,0,
        0,1304,1305,3,84,42,0,1305,1306,3,78,39,0,1306,1310,1,0,0,0,1307,
        1308,5,61,0,0,1308,1310,3,162,81,0,1309,1304,1,0,0,0,1309,1307,1,
        0,0,0,1310,1311,1,0,0,0,1311,1312,5,88,0,0,1312,1313,3,196,98,0,
        1313,1316,1,0,0,0,1314,1316,3,104,52,0,1315,1301,1,0,0,0,1315,1314,
        1,0,0,0,1316,181,1,0,0,0,1317,1318,3,184,92,0,1318,1319,5,94,0,0,
        1319,1321,1,0,0,0,1320,1317,1,0,0,0,1321,1322,1,0,0,0,1322,1320,
        1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,0,1324,1326,3,158,79,0,
        1325,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1325,1,0,0,0,1327,1328,
        1,0,0,0,1328,183,1,0,0,0,1329,1335,5,6,0,0,1330,1336,3,196,98,0,
        1331,1336,5,129,0,0,1332,1333,3,244,122,0,1333,1334,3,162,81,0,1334,
        1336,1,0,0,0,1335,1330,1,0,0,0,1335,1331,1,0,0,0,1335,1332,1,0,0,
        0,1336,1339,1,0,0,0,1337,1339,5,12,0,0,1338,1329,1,0,0,0,1338,1337,
        1,0,0,0,1339,185,1,0,0,0,1340,1353,3,190,95,0,1341,1343,3,188,94,
        0,1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1346,
        5,85,0,0,1345,1347,3,196,98,0,1346,1345,1,0,0,0,1346,1347,1,0,0,
        0,1347,1348,1,0,0,0,1348,1350,5,85,0,0,1349,1351,3,192,96,0,1350,
        1349,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1340,1,0,0,
        0,1352,1342,1,0,0,0,1353,187,1,0,0,0,1354,1357,3,160,80,0,1355,1357,
        3,192,96,0,1356,1354,1,0,0,0,1356,1355,1,0,0,0,1357,189,1,0,0,0,
        1358,1360,3,14,7,0,1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,1359,
        1,0,0,0,1361,1362,1,0,0,0,1362,1366,1,0,0,0,1363,1361,1,0,0,0,1364,
        1367,3,244,122,0,1365,1367,5,61,0,0,1366,1364,1,0,0,0,1366,1365,
        1,0,0,0,1367,1368,1,0,0,0,1368,1369,3,78,39,0,1369,1370,5,94,0,0,
        1370,1371,3,196,98,0,1371,191,1,0,0,0,1372,1377,3,196,98,0,1373,
        1374,5,86,0,0,1374,1376,3,196,98,0,1375,1373,1,0,0,0,1376,1379,1,
        0,0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,193,1,0,0,0,1379,
        1377,1,0,0,0,1380,1384,3,162,81,0,1381,1384,5,53,0,0,1382,1384,5,
        50,0,0,1383,1380,1,0,0,0,1383,1381,1,0,0,0,1383,1382,1,0,0,0,1384,
        1385,1,0,0,0,1385,1386,3,254,127,0,1386,195,1,0,0,0,1387,1388,6,
        98,-1,0,1388,1431,3,210,105,0,1389,1431,3,194,97,0,1390,1391,3,244,
        122,0,1391,1397,5,123,0,0,1392,1394,3,248,124,0,1393,1392,1,0,0,
        0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1398,3,162,81,0,1396,
        1398,5,33,0,0,1397,1393,1,0,0,0,1397,1396,1,0,0,0,1398,1431,1,0,
        0,0,1399,1400,3,222,111,0,1400,1402,5,123,0,0,1401,1403,3,248,124,
        0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1405,
        5,33,0,0,1405,1431,1,0,0,0,1406,1431,3,212,106,0,1407,1408,7,6,0,
        0,1408,1431,3,196,98,17,1409,1413,5,79,0,0,1410,1412,3,114,57,0,
        1411,1410,1,0,0,0,1412,1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,
        1,0,0,0,1414,1416,1,0,0,0,1415,1413,1,0,0,0,1416,1421,3,244,122,
        0,1417,1418,5,107,0,0,1418,1420,3,244,122,0,1419,1417,1,0,0,0,1420,
        1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,
        0,1423,1421,1,0,0,0,1424,1425,5,80,0,0,1425,1426,3,196,98,16,1426,
        1431,1,0,0,0,1427,1428,5,33,0,0,1428,1431,3,224,112,0,1429,1431,
        3,204,102,0,1430,1387,1,0,0,0,1430,1389,1,0,0,0,1430,1390,1,0,0,
        0,1430,1399,1,0,0,0,1430,1406,1,0,0,0,1430,1407,1,0,0,0,1430,1409,
        1,0,0,0,1430,1427,1,0,0,0,1430,1429,1,0,0,0,1431,1515,1,0,0,0,1432,
        1433,10,14,0,0,1433,1434,7,7,0,0,1434,1514,3,196,98,15,1435,1436,
        10,13,0,0,1436,1437,7,8,0,0,1437,1514,3,196,98,14,1438,1446,10,12,
        0,0,1439,1440,5,90,0,0,1440,1447,5,90,0,0,1441,1442,5,89,0,0,1442,
        1443,5,89,0,0,1443,1447,5,89,0,0,1444,1445,5,89,0,0,1445,1447,5,
        89,0,0,1446,1439,1,0,0,0,1446,1441,1,0,0,0,1446,1444,1,0,0,0,1447,
        1448,1,0,0,0,1448,1514,3,196,98,13,1449,1450,10,11,0,0,1450,1451,
        7,9,0,0,1451,1514,3,196,98,12,1452,1453,10,9,0,0,1453,1454,7,10,
        0,0,1454,1514,3,196,98,10,1455,1456,10,8,0,0,1456,1457,5,107,0,0,
        1457,1514,3,196,98,9,1458,1459,10,7,0,0,1459,1460,5,109,0,0,1460,
        1514,3,196,98,8,1461,1462,10,6,0,0,1462,1463,5,108,0,0,1463,1514,
        3,196,98,7,1464,1465,10,5,0,0,1465,1466,5,99,0,0,1466,1514,3,196,
        98,6,1467,1468,10,4,0,0,1468,1469,5,100,0,0,1469,1514,3,196,98,5,
        1470,1471,10,3,0,0,1471,1472,5,93,0,0,1472,1473,3,196,98,0,1473,
        1474,5,94,0,0,1474,1475,3,196,98,3,1475,1514,1,0,0,0,1476,1477,10,
        2,0,0,1477,1478,7,11,0,0,1478,1514,3,196,98,2,1479,1480,10,25,0,
        0,1480,1481,5,83,0,0,1481,1482,3,196,98,0,1482,1483,5,84,0,0,1483,
        1514,1,0,0,0,1484,1485,10,24,0,0,1485,1497,5,87,0,0,1486,1498,3,
        162,81,0,1487,1498,3,194,97,0,1488,1498,5,53,0,0,1489,1491,5,33,
        0,0,1490,1492,3,240,120,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,
        1493,1,0,0,0,1493,1498,3,228,114,0,1494,1495,5,50,0,0,1495,1498,
        3,250,125,0,1496,1498,3,234,117,0,1497,1486,1,0,0,0,1497,1487,1,
        0,0,0,1497,1488,1,0,0,0,1497,1489,1,0,0,0,1497,1494,1,0,0,0,1497,
        1496,1,0,0,0,1498,1514,1,0,0,0,1499,1500,10,22,0,0,1500,1502,5,123,
        0,0,1501,1503,3,248,124,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,
        1504,1,0,0,0,1504,1514,3,162,81,0,1505,1506,10,18,0,0,1506,1514,
        7,12,0,0,1507,1508,10,10,0,0,1508,1511,5,27,0,0,1509,1512,3,244,
        122,0,1510,1512,3,198,99,0,1511,1509,1,0,0,0,1511,1510,1,0,0,0,1512,
        1514,1,0,0,0,1513,1432,1,0,0,0,1513,1435,1,0,0,0,1513,1438,1,0,0,
        0,1513,1449,1,0,0,0,1513,1452,1,0,0,0,1513,1455,1,0,0,0,1513,1458,
        1,0,0,0,1513,1461,1,0,0,0,1513,1464,1,0,0,0,1513,1467,1,0,0,0,1513,
        1470,1,0,0,0,1513,1476,1,0,0,0,1513,1479,1,0,0,0,1513,1484,1,0,0,
        0,1513,1499,1,0,0,0,1513,1505,1,0,0,0,1513,1507,1,0,0,0,1514,1517,
        1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,197,1,0,0,0,1517,
        1515,1,0,0,0,1518,1520,3,14,7,0,1519,1518,1,0,0,0,1520,1523,1,0,
        0,0,1521,1519,1,0,0,0,1521,1522,1,0,0,0,1522,1524,1,0,0,0,1523,1521,
        1,0,0,0,1524,1528,3,244,122,0,1525,1527,3,114,57,0,1526,1525,1,0,
        0,0,1527,1530,1,0,0,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,1529,1531,
        1,0,0,0,1530,1528,1,0,0,0,1531,1532,3,74,37,0,1532,1541,1,0,0,0,
        1533,1534,3,244,122,0,1534,1536,5,79,0,0,1535,1537,3,200,100,0,1536,
        1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1539,5,80,
        0,0,1539,1541,1,0,0,0,1540,1521,1,0,0,0,1540,1533,1,0,0,0,1541,199,
        1,0,0,0,1542,1547,3,202,101,0,1543,1544,5,86,0,0,1544,1546,3,202,
        101,0,1545,1543,1,0,0,0,1546,1549,1,0,0,0,1547,1545,1,0,0,0,1547,
        1548,1,0,0,0,1548,201,1,0,0,0,1549,1547,1,0,0,0,1550,1551,3,198,
        99,0,1551,203,1,0,0,0,1552,1553,3,206,103,0,1553,1554,5,122,0,0,
        1554,1555,3,208,104,0,1555,205,1,0,0,0,1556,1579,3,162,81,0,1557,
        1559,5,79,0,0,1558,1560,3,94,47,0,1559,1558,1,0,0,0,1559,1560,1,
        0,0,0,1560,1561,1,0,0,0,1561,1579,5,80,0,0,1562,1563,5,79,0,0,1563,
        1568,3,162,81,0,1564,1565,5,86,0,0,1565,1567,3,162,81,0,1566,1564,
        1,0,0,0,1567,1570,1,0,0,0,1568,1566,1,0,0,0,1568,1569,1,0,0,0,1569,
        1571,1,0,0,0,1570,1568,1,0,0,0,1571,1572,5,80,0,0,1572,1579,1,0,
        0,0,1573,1575,5,79,0,0,1574,1576,3,100,50,0,1575,1574,1,0,0,0,1575,
        1576,1,0,0,0,1576,1577,1,0,0,0,1577,1579,5,80,0,0,1578,1556,1,0,
        0,0,1578,1557,1,0,0,0,1578,1562,1,0,0,0,1578,1573,1,0,0,0,1579,207,
        1,0,0,0,1580,1583,3,196,98,0,1581,1583,3,156,78,0,1582,1580,1,0,
        0,0,1582,1581,1,0,0,0,1583,209,1,0,0,0,1584,1585,5,79,0,0,1585,1586,
        3,196,98,0,1586,1587,5,80,0,0,1587,1603,1,0,0,0,1588,1603,5,53,0,
        0,1589,1603,5,50,0,0,1590,1603,3,106,53,0,1591,1603,3,162,81,0,1592,
        1593,3,46,23,0,1593,1594,5,87,0,0,1594,1595,5,9,0,0,1595,1603,1,
        0,0,0,1596,1600,3,240,120,0,1597,1601,3,252,126,0,1598,1599,5,53,
        0,0,1599,1601,3,254,127,0,1600,1597,1,0,0,0,1600,1598,1,0,0,0,1601,
        1603,1,0,0,0,1602,1584,1,0,0,0,1602,1588,1,0,0,0,1602,1589,1,0,0,
        0,1602,1590,1,0,0,0,1602,1591,1,0,0,0,1602,1592,1,0,0,0,1602,1596,
        1,0,0,0,1603,211,1,0,0,0,1604,1605,5,51,0,0,1605,1606,5,79,0,0,1606,
        1607,3,196,98,0,1607,1608,5,80,0,0,1608,1612,5,81,0,0,1609,1611,
        3,214,107,0,1610,1609,1,0,0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,
        0,1612,1613,1,0,0,0,1613,1615,1,0,0,0,1614,1612,1,0,0,0,1615,1616,
        5,82,0,0,1616,213,1,0,0,0,1617,1635,5,6,0,0,1618,1636,3,192,96,0,
        1619,1622,5,78,0,0,1620,1621,5,86,0,0,1621,1623,5,12,0,0,1622,1620,
        1,0,0,0,1622,1623,1,0,0,0,1623,1636,1,0,0,0,1624,1629,3,218,109,
        0,1625,1626,5,86,0,0,1626,1628,3,218,109,0,1627,1625,1,0,0,0,1628,
        1631,1,0,0,0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,1633,1,0,0,
        0,1631,1629,1,0,0,0,1632,1634,3,216,108,0,1633,1632,1,0,0,0,1633,
        1634,1,0,0,0,1634,1636,1,0,0,0,1635,1618,1,0,0,0,1635,1619,1,0,0,
        0,1635,1624,1,0,0,0,1636,1637,1,0,0,0,1637,1638,7,13,0,0,1638,1643,
        3,220,110,0,1639,1640,5,12,0,0,1640,1641,7,13,0,0,1641,1643,3,220,
        110,0,1642,1617,1,0,0,0,1642,1639,1,0,0,0,1643,215,1,0,0,0,1644,
        1645,5,64,0,0,1645,1646,3,196,98,0,1646,217,1,0,0,0,1647,1648,3,
        198,99,0,1648,219,1,0,0,0,1649,1657,3,156,78,0,1650,1652,3,158,79,
        0,1651,1650,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,
        1,0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1656,1649,1,0,0,0,1656,
        1653,1,0,0,0,1657,221,1,0,0,0,1658,1659,3,84,42,0,1659,1660,5,87,
        0,0,1660,1662,1,0,0,0,1661,1658,1,0,0,0,1661,1662,1,0,0,0,1662,1666,
        1,0,0,0,1663,1665,3,114,57,0,1664,1663,1,0,0,0,1665,1668,1,0,0,0,
        1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,1669,1,0,0,0,1668,1666,
        1,0,0,0,1669,1671,3,162,81,0,1670,1672,3,248,124,0,1671,1670,1,0,
        0,0,1671,1672,1,0,0,0,1672,223,1,0,0,0,1673,1675,3,240,120,0,1674,
        1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1677,3,226,
        113,0,1677,1678,3,232,116,0,1678,1683,1,0,0,0,1679,1680,3,226,113,
        0,1680,1681,3,230,115,0,1681,1683,1,0,0,0,1682,1674,1,0,0,0,1682,
        1679,1,0,0,0,1683,225,1,0,0,0,1684,1686,3,162,81,0,1685,1687,3,236,
        118,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1695,1,0,0,0,1688,
        1689,5,87,0,0,1689,1691,3,162,81,0,1690,1692,3,236,118,0,1691,1690,
        1,0,0,0,1691,1692,1,0,0,0,1692,1694,1,0,0,0,1693,1688,1,0,0,0,1694,
        1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,1700,1,0,0,
        0,1697,1695,1,0,0,0,1698,1700,3,246,123,0,1699,1684,1,0,0,0,1699,
        1698,1,0,0,0,1700,227,1,0,0,0,1701,1703,3,162,81,0,1702,1704,3,238,
        119,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1705,1,0,0,0,1705,
        1706,3,232,116,0,1706,229,1,0,0,0,1707,1708,5,83,0,0,1708,1710,5,
        84,0,0,1709,1707,1,0,0,0,1710,1711,1,0,0,0,1711,1709,1,0,0,0,1711,
        1712,1,0,0,0,1712,1713,1,0,0,0,1713,1730,3,82,41,0,1714,1715,5,83,
        0,0,1715,1716,3,196,98,0,1716,1717,5,84,0,0,1717,1719,1,0,0,0,1718,
        1714,1,0,0,0,1719,1720,1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,
        0,1721,1726,1,0,0,0,1722,1723,5,83,0,0,1723,1725,5,84,0,0,1724,1722,
        1,0,0,0,1725,1728,1,0,0,0,1726,1724,1,0,0,0,1726,1727,1,0,0,0,1727,
        1730,1,0,0,0,1728,1726,1,0,0,0,1729,1709,1,0,0,0,1729,1718,1,0,0,
        0,1730,231,1,0,0,0,1731,1733,3,254,127,0,1732,1734,3,34,17,0,1733,
        1732,1,0,0,0,1733,1734,1,0,0,0,1734,233,1,0,0,0,1735,1736,3,240,
        120,0,1736,1737,3,252,126,0,1737,235,1,0,0,0,1738,1739,5,90,0,0,
        1739,1742,5,89,0,0,1740,1742,3,248,124,0,1741,1738,1,0,0,0,1741,
        1740,1,0,0,0,1742,237,1,0,0,0,1743,1744,5,90,0,0,1744,1747,5,89,
        0,0,1745,1747,3,240,120,0,1746,1743,1,0,0,0,1746,1745,1,0,0,0,1747,
        239,1,0,0,0,1748,1749,5,90,0,0,1749,1750,3,242,121,0,1750,1751,5,
        89,0,0,1751,241,1,0,0,0,1752,1757,3,244,122,0,1753,1754,5,86,0,0,
        1754,1756,3,244,122,0,1755,1753,1,0,0,0,1756,1759,1,0,0,0,1757,1755,
        1,0,0,0,1757,1758,1,0,0,0,1758,243,1,0,0,0,1759,1757,1,0,0,0,1760,
        1762,3,114,57,0,1761,1760,1,0,0,0,1762,1765,1,0,0,0,1763,1761,1,
        0,0,0,1763,1764,1,0,0,0,1764,1768,1,0,0,0,1765,1763,1,0,0,0,1766,
        1769,3,84,42,0,1767,1769,3,246,123,0,1768,1766,1,0,0,0,1768,1767,
        1,0,0,0,1769,1780,1,0,0,0,1770,1772,3,114,57,0,1771,1770,1,0,0,0,
        1772,1775,1,0,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,1776,
        1,0,0,0,1775,1773,1,0,0,0,1776,1777,5,83,0,0,1777,1779,5,84,0,0,
        1778,1773,1,0,0,0,1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,1781,
        1,0,0,0,1781,245,1,0,0,0,1782,1780,1,0,0,0,1783,1784,7,14,0,0,1784,
        247,1,0,0,0,1785,1786,5,90,0,0,1786,1791,3,86,43,0,1787,1788,5,86,
        0,0,1788,1790,3,86,43,0,1789,1787,1,0,0,0,1790,1793,1,0,0,0,1791,
        1789,1,0,0,0,1791,1792,1,0,0,0,1792,1794,1,0,0,0,1793,1791,1,0,0,
        0,1794,1795,5,89,0,0,1795,249,1,0,0,0,1796,1806,3,254,127,0,1797,
        1799,5,87,0,0,1798,1800,3,248,124,0,1799,1798,1,0,0,0,1799,1800,
        1,0,0,0,1800,1801,1,0,0,0,1801,1803,3,162,81,0,1802,1804,3,254,127,
        0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,1806,1,0,0,0,1805,1796,
        1,0,0,0,1805,1797,1,0,0,0,1806,251,1,0,0,0,1807,1808,5,50,0,0,1808,
        1813,3,250,125,0,1809,1810,3,162,81,0,1810,1811,3,254,127,0,1811,
        1813,1,0,0,0,1812,1807,1,0,0,0,1812,1809,1,0,0,0,1813,253,1,0,0,
        0,1814,1816,5,79,0,0,1815,1817,3,192,96,0,1816,1815,1,0,0,0,1816,
        1817,1,0,0,0,1817,1818,1,0,0,0,1818,1819,5,80,0,0,1819,255,1,0,0,
        0,228,257,261,263,268,270,277,282,290,299,304,311,319,326,338,342,
        347,351,355,359,369,377,385,389,396,403,407,410,413,422,428,433,
        436,442,448,452,456,464,473,480,486,490,502,511,516,522,526,538,
        545,558,563,573,581,591,600,611,616,625,635,640,649,655,662,667,
        675,679,681,687,693,698,704,710,712,719,724,729,732,734,744,754,
        759,762,767,776,783,794,800,811,821,832,841,846,849,856,866,874,
        877,880,893,901,906,914,918,922,926,930,932,936,942,952,956,964,
        973,987,990,1002,1005,1021,1026,1033,1038,1044,1053,1061,1068,1072,
        1079,1081,1090,1100,1105,1116,1125,1132,1139,1150,1177,1180,1183,
        1191,1195,1205,1211,1224,1233,1238,1251,1257,1264,1277,1286,1295,
        1301,1309,1315,1322,1327,1335,1338,1342,1346,1350,1352,1356,1361,
        1366,1377,1383,1393,1397,1402,1413,1421,1430,1446,1491,1497,1502,
        1511,1513,1515,1521,1528,1536,1540,1547,1559,1568,1575,1578,1582,
        1600,1602,1612,1622,1629,1633,1635,1642,1653,1656,1661,1666,1671,
        1674,1682,1686,1691,1695,1699,1703,1711,1720,1726,1729,1733,1741,
        1746,1757,1763,1768,1773,1780,1791,1799,1803,1805,1812,1816
    ]

class JavaParser ( JavaParserBase ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'exports'", "'extends'", 
                     "'final'", "'finally'", "'float'", "'for'", "'goto'", 
                     "'if'", "'implements'", "'import'", "'instanceof'", 
                     "'int'", "'interface'", "'long'", "'module'", "'native'", 
                     "'new'", "'non-sealed'", "'open'", "'opens'", "'package'", 
                     "'permits'", "'private'", "'protected'", "'provides'", 
                     "'public'", "'record'", "'requires'", "'return'", "'sealed'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'to'", "'transient'", "'transitive'", "'try'", "'uses'", 
                     "'var'", "'void'", "'volatile'", "'when'", "'while'", 
                     "'with'", "'yield'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", 
                     "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXPORTS", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                      "FOR", "GOTO", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", 
                      "INT", "INTERFACE", "LONG", "MODULE", "NATIVE", "NEW", 
                      "NON_SEALED", "OPEN", "OPENS", "PACKAGE", "PERMITS", 
                      "PRIVATE", "PROTECTED", "PROVIDES", "PUBLIC", "RECORD", 
                      "REQUIRES", "RETURN", "SEALED", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TO", "TRANSIENT", "TRANSITIVE", 
                      "TRY", "USES", "VAR", "VOID", "VOLATILE", "WHEN", 
                      "WHILE", "WITH", "YIELD", "DECIMAL_LITERAL", "HEX_LITERAL", 
                      "OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", 
                      "HEX_FLOAT_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
                      "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                      "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", 
                      "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", 
                      "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
                      "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", 
                      "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
                      "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_modularCompulationUnit = 1
    RULE_packageDeclaration = 2
    RULE_importDeclaration = 3
    RULE_typeDeclaration = 4
    RULE_modifier = 5
    RULE_classOrInterfaceModifier = 6
    RULE_variableModifier = 7
    RULE_classDeclaration = 8
    RULE_typeParameters = 9
    RULE_typeParameter = 10
    RULE_typeBound = 11
    RULE_enumDeclaration = 12
    RULE_enumConstants = 13
    RULE_enumConstant = 14
    RULE_enumBodyDeclarations = 15
    RULE_interfaceDeclaration = 16
    RULE_classBody = 17
    RULE_interfaceBody = 18
    RULE_classBodyDeclaration = 19
    RULE_memberDeclaration = 20
    RULE_methodDeclaration = 21
    RULE_methodBody = 22
    RULE_typeTypeOrVoid = 23
    RULE_genericMethodDeclaration = 24
    RULE_genericConstructorDeclaration = 25
    RULE_constructorDeclaration = 26
    RULE_compactConstructorDeclaration = 27
    RULE_fieldDeclaration = 28
    RULE_interfaceBodyDeclaration = 29
    RULE_interfaceMemberDeclaration = 30
    RULE_constDeclaration = 31
    RULE_constantDeclarator = 32
    RULE_interfaceMethodDeclaration = 33
    RULE_interfaceMethodModifier = 34
    RULE_genericInterfaceMethodDeclaration = 35
    RULE_interfaceCommonBodyDeclaration = 36
    RULE_variableDeclarators = 37
    RULE_variableDeclarator = 38
    RULE_variableDeclaratorId = 39
    RULE_variableInitializer = 40
    RULE_arrayInitializer = 41
    RULE_classOrInterfaceType = 42
    RULE_typeArgument = 43
    RULE_qualifiedNameList = 44
    RULE_formalParameters = 45
    RULE_receiverParameter = 46
    RULE_formalParameterList = 47
    RULE_formalParameter = 48
    RULE_lastFormalParameter = 49
    RULE_lambdaLVTIList = 50
    RULE_lambdaLVTIParameter = 51
    RULE_qualifiedName = 52
    RULE_literal = 53
    RULE_integerLiteral = 54
    RULE_floatLiteral = 55
    RULE_altAnnotationQualifiedName = 56
    RULE_annotation = 57
    RULE_elementValuePairs = 58
    RULE_elementValuePair = 59
    RULE_elementValue = 60
    RULE_elementValueArrayInitializer = 61
    RULE_annotationTypeDeclaration = 62
    RULE_annotationTypeBody = 63
    RULE_annotationTypeElementDeclaration = 64
    RULE_annotationTypeElementRest = 65
    RULE_annotationMethodOrConstantRest = 66
    RULE_annotationMethodRest = 67
    RULE_annotationConstantRest = 68
    RULE_defaultValue = 69
    RULE_moduleDeclaration = 70
    RULE_moduleDirective = 71
    RULE_requiresModifier = 72
    RULE_recordDeclaration = 73
    RULE_recordHeader = 74
    RULE_recordComponentList = 75
    RULE_recordComponent = 76
    RULE_recordBody = 77
    RULE_block = 78
    RULE_blockStatement = 79
    RULE_localVariableDeclaration = 80
    RULE_identifier = 81
    RULE_typeIdentifier = 82
    RULE_localTypeDeclaration = 83
    RULE_statement = 84
    RULE_catchClause = 85
    RULE_catchType = 86
    RULE_finallyBlock = 87
    RULE_resourceSpecification = 88
    RULE_resources = 89
    RULE_resource = 90
    RULE_switchBlockStatementGroup = 91
    RULE_switchLabel = 92
    RULE_forControl = 93
    RULE_forInit = 94
    RULE_enhancedForControl = 95
    RULE_expressionList = 96
    RULE_methodCall = 97
    RULE_expression = 98
    RULE_pattern = 99
    RULE_componentPatternList = 100
    RULE_componentPattern = 101
    RULE_lambdaExpression = 102
    RULE_lambdaParameters = 103
    RULE_lambdaBody = 104
    RULE_primary = 105
    RULE_switchExpression = 106
    RULE_switchLabeledRule = 107
    RULE_guard = 108
    RULE_casePattern = 109
    RULE_switchRuleOutcome = 110
    RULE_classType = 111
    RULE_creator = 112
    RULE_createdName = 113
    RULE_innerCreator = 114
    RULE_arrayCreatorRest = 115
    RULE_classCreatorRest = 116
    RULE_explicitGenericInvocation = 117
    RULE_typeArgumentsOrDiamond = 118
    RULE_nonWildcardTypeArgumentsOrDiamond = 119
    RULE_nonWildcardTypeArguments = 120
    RULE_typeList = 121
    RULE_typeType = 122
    RULE_primitiveType = 123
    RULE_typeArguments = 124
    RULE_superSuffix = 125
    RULE_explicitGenericInvocationSuffix = 126
    RULE_arguments = 127

    ruleNames =  [ "compilationUnit", "modularCompulationUnit", "packageDeclaration", 
                   "importDeclaration", "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "compactConstructorDeclaration", 
                   "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                   "interfaceCommonBodyDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                   "qualifiedNameList", "formalParameters", "receiverParameter", 
                   "formalParameterList", "formalParameter", "lastFormalParameter", 
                   "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
                   "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                   "annotation", "elementValuePairs", "elementValuePair", 
                   "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
                   "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleDirective", "requiresModifier", 
                   "recordDeclaration", "recordHeader", "recordComponentList", 
                   "recordComponent", "recordBody", "block", "blockStatement", 
                   "localVariableDeclaration", "identifier", "typeIdentifier", 
                   "localTypeDeclaration", "statement", "catchClause", "catchType", 
                   "finallyBlock", "resourceSpecification", "resources", 
                   "resource", "switchBlockStatementGroup", "switchLabel", 
                   "forControl", "forInit", "enhancedForControl", "expressionList", 
                   "methodCall", "expression", "pattern", "componentPatternList", 
                   "componentPattern", "lambdaExpression", "lambdaParameters", 
                   "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
                   "guard", "casePattern", "switchRuleOutcome", "classType", 
                   "creator", "createdName", "innerCreator", "arrayCreatorRest", 
                   "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXPORTS=17
    EXTENDS=18
    FINAL=19
    FINALLY=20
    FLOAT=21
    FOR=22
    GOTO=23
    IF=24
    IMPLEMENTS=25
    IMPORT=26
    INSTANCEOF=27
    INT=28
    INTERFACE=29
    LONG=30
    MODULE=31
    NATIVE=32
    NEW=33
    NON_SEALED=34
    OPEN=35
    OPENS=36
    PACKAGE=37
    PERMITS=38
    PRIVATE=39
    PROTECTED=40
    PROVIDES=41
    PUBLIC=42
    RECORD=43
    REQUIRES=44
    RETURN=45
    SEALED=46
    SHORT=47
    STATIC=48
    STRICTFP=49
    SUPER=50
    SWITCH=51
    SYNCHRONIZED=52
    THIS=53
    THROW=54
    THROWS=55
    TO=56
    TRANSIENT=57
    TRANSITIVE=58
    TRY=59
    USES=60
    VAR=61
    VOID=62
    VOLATILE=63
    WHEN=64
    WHILE=65
    WITH=66
    YIELD=67
    DECIMAL_LITERAL=68
    HEX_LITERAL=69
    OCT_LITERAL=70
    BINARY_LITERAL=71
    FLOAT_LITERAL=72
    HEX_FLOAT_LITERAL=73
    BOOL_LITERAL=74
    CHAR_LITERAL=75
    STRING_LITERAL=76
    TEXT_BLOCK=77
    NULL_LITERAL=78
    LPAREN=79
    RPAREN=80
    LBRACE=81
    RBRACE=82
    LBRACK=83
    RBRACK=84
    SEMI=85
    COMMA=86
    DOT=87
    ASSIGN=88
    GT=89
    LT=90
    BANG=91
    TILDE=92
    QUESTION=93
    COLON=94
    EQUAL=95
    LE=96
    GE=97
    NOTEQUAL=98
    AND=99
    OR=100
    INC=101
    DEC=102
    ADD=103
    SUB=104
    MUL=105
    DIV=106
    BITAND=107
    BITOR=108
    CARET=109
    MOD=110
    ADD_ASSIGN=111
    SUB_ASSIGN=112
    MUL_ASSIGN=113
    DIV_ASSIGN=114
    AND_ASSIGN=115
    OR_ASSIGN=116
    XOR_ASSIGN=117
    MOD_ASSIGN=118
    LSHIFT_ASSIGN=119
    RSHIFT_ASSIGN=120
    URSHIFT_ASSIGN=121
    ARROW=122
    COLONCOLON=123
    AT=124
    ELLIPSIS=125
    WS=126
    COMMENT=127
    LINE_COMMENT=128
    IDENTIFIER=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def modularCompulationUnit(self):
            return self.getTypedRuleContext(JavaParser.ModularCompulationUnitContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.packageDeclaration()


                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 261
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [26]:
                            self.state = 259
                            self.importDeclaration()
                            pass
                        elif token in [85]:
                            self.state = 260
                            self.match(JavaParser.SEMI)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -7313370881793359615) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660702539773) != 0):
                    self.state = 268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 9, 16, 17, 19, 29, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                        self.state = 266
                        self.typeDeclaration()
                        pass
                    elif token in [85]:
                        self.state = 267
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 273
                self.match(JavaParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.modularCompulationUnit()
                self.state = 275
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModularCompulationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_modularCompulationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModularCompulationUnit" ):
                listener.enterModularCompulationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModularCompulationUnit" ):
                listener.exitModularCompulationUnit(self)




    def modularCompulationUnit(self):

        localctx = JavaParser.ModularCompulationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_modularCompulationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 279
                self.importDeclaration()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 285
            self.moduleDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                self.state = 287
                self.annotation()
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 293
            self.match(JavaParser.PACKAGE)
            self.state = 294
            self.qualifiedName()
            self.state = 295
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(JavaParser.IMPORT)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 298
                self.match(JavaParser.STATIC)


            self.state = 301
            self.qualifiedName()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 302
                self.match(JavaParser.DOT)
                self.state = 303
                self.match(JavaParser.MUL)


            self.state = 306
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.classOrInterfaceModifier() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 314
                self.classDeclaration()
                pass
            elif token in [16]:
                self.state = 315
                self.enumDeclaration()
                pass
            elif token in [29]:
                self.state = 316
                self.interfaceDeclaration()
                pass
            elif token in [124]:
                self.state = 317
                self.annotationTypeDeclaration()
                pass
            elif token in [43]:
                self.state = 318
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modifier)
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 17, 19, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.classOrInterfaceModifier()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(JavaParser.NATIVE)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 324
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 5)
                self.state = 325
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 332
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 333
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 334
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 335
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 336
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 337
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_variableModifier)
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(JavaParser.FINAL)
                pass
            elif token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(JavaParser.CLASS)
            self.state = 345
            self.identifier()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 346
                self.typeParameters()


            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 349
                self.match(JavaParser.EXTENDS)
                self.state = 350
                self.typeType()


            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 353
                self.match(JavaParser.IMPLEMENTS)
                self.state = 354
                self.typeList()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 357
                self.match(JavaParser.PERMITS)
                self.state = 358
                self.typeList()


            self.state = 361
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(JavaParser.LT)
            self.state = 364
            self.typeParameter()
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 365
                self.match(JavaParser.COMMA)
                self.state = 366
                self.typeParameter()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 374
                    self.annotation() 
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 380
            self.identifier()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 381
                self.match(JavaParser.EXTENDS)
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 382
                        self.annotation() 
                    self.state = 387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 388
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.typeType()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 392
                self.match(JavaParser.BITAND)
                self.state = 393
                self.typeType()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(JavaParser.ENUM)
            self.state = 400
            self.identifier()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 401
                self.match(JavaParser.IMPLEMENTS)
                self.state = 402
                self.typeList()


            self.state = 405
            self.match(JavaParser.LBRACE)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                self.state = 406
                self.enumConstants()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 409
                self.match(JavaParser.COMMA)


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 412
                self.enumBodyDeclarations()


            self.state = 415
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.enumConstant()
            self.state = 422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 418
                    self.match(JavaParser.COMMA)
                    self.state = 419
                    self.enumConstant() 
                self.state = 424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    self.annotation() 
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 431
            self.identifier()
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 432
                self.arguments()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 435
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(JavaParser.SEMI)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 439
                self.classBodyDeclaration()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(JavaParser.INTERFACE)
            self.state = 446
            self.identifier()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 447
                self.typeParameters()


            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 450
                self.match(JavaParser.EXTENDS)
                self.state = 451
                self.typeList()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 454
                self.match(JavaParser.PERMITS)
                self.state = 455
                self.typeList()


            self.state = 458
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(JavaParser.LBRACE)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 461
                self.classBodyDeclaration()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(JavaParser.LBRACE)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736855659) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685762557) != 0):
                self.state = 470
                self.interfaceBodyDeclaration()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 479
                    self.match(JavaParser.STATIC)


                self.state = 482
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 483
                        self.modifier() 
                    self.state = 488
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                self.state = 489
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memberDeclaration)
        try:
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.genericMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.fieldDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 496
                self.constructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 497
                self.genericConstructorDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 498
                self.interfaceDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 499
                self.annotationTypeDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 500
                self.classDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 501
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.typeTypeOrVoid()
            self.state = 505
            self.identifier()
            self.state = 506
            self.formalParameters()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 507
                self.match(JavaParser.LBRACK)
                self.state = 508
                self.match(JavaParser.RBRACK)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 514
                self.match(JavaParser.THROWS)
                self.state = 515
                self.qualifiedNameList()


            self.state = 518
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodBody)
        try:
            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.block()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_typeTypeOrVoid)
        try:
            self.state = 526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 35, 36, 38, 41, 43, 44, 46, 47, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.typeType()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.typeParameters()
            self.state = 529
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.typeParameters()
            self.state = 532
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.identifier()
            self.state = 535
            self.formalParameters()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 536
                self.match(JavaParser.THROWS)
                self.state = 537
                self.qualifiedNameList()


            self.state = 540
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)




    def compactConstructorDeclaration(self):

        localctx = JavaParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 542
                    self.modifier() 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 548
            self.identifier()
            self.state = 549
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.typeType()
            self.state = 552
            self.variableDeclarators()
            self.state = 553
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 12, 14, 16, 17, 19, 21, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 90, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 555
                        self.modifier() 
                    self.state = 560
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 561
                self.interfaceMemberDeclaration()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 570
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 571
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 572
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.typeType()
            self.state = 576
            self.constantDeclarator()
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 577
                self.match(JavaParser.COMMA)
                self.state = 578
                self.constantDeclarator()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 584
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.identifier()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 587
                self.match(JavaParser.LBRACK)
                self.state = 588
                self.match(JavaParser.RBRACK)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(JavaParser.ASSIGN)
            self.state = 595
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 597
                    self.interfaceMethodModifier() 
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 603
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_interfaceMethodModifier)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.annotation()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 608
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 5)
                self.state = 609
                self.match(JavaParser.STATIC)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 6)
                self.state = 610
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -7313371715285743615) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660703064061) != 0):
                self.state = 613
                self.interfaceMethodModifier()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 619
            self.typeParameters()
            self.state = 620
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 622
                    self.annotation() 
                self.state = 627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 628
            self.typeTypeOrVoid()
            self.state = 629
            self.identifier()
            self.state = 630
            self.formalParameters()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 631
                self.match(JavaParser.LBRACK)
                self.state = 632
                self.match(JavaParser.RBRACK)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 638
                self.match(JavaParser.THROWS)
                self.state = 639
                self.qualifiedNameList()


            self.state = 642
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclarators)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.variableDeclarator()
            self.state = 649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 645
                    self.match(JavaParser.COMMA)
                    self.state = 646
                    self.variableDeclarator() 
                self.state = 651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.variableDeclaratorId()
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 653
                self.match(JavaParser.ASSIGN)
                self.state = 654
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDeclaratorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.identifier()
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 658
                    self.match(JavaParser.LBRACK)
                    self.state = 659
                    self.match(JavaParser.RBRACK) 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableInitializer)
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.arrayInitializer()
                pass
            elif token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 33, 35, 36, 38, 41, 43, 44, 46, 47, 50, 51, 53, 56, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 92, 101, 102, 103, 104, 124, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(JavaParser.LBRACE)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260026367) != 0):
                self.state = 670
                self.variableInitializer()
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 671
                        self.match(JavaParser.COMMA)
                        self.state = 672
                        self.variableInitializer() 
                    self.state = 677
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 678
                    self.match(JavaParser.COMMA)




            self.state = 683
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaParser.TypeIdentifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self.identifier()
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 686
                        self.typeArguments()


                    self.state = 689
                    self.match(JavaParser.DOT) 
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

            self.state = 696
            self.typeIdentifier()
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 697
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                    self.state = 701
                    self.annotation()
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(JavaParser.QUESTION)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==50:
                    self.state = 708
                    _la = self._input.LA(1)
                    if not(_la==18 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 709
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.qualifiedName()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 715
                self.match(JavaParser.COMMA)
                self.state = 716
                self.qualifiedName()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(JavaParser.LPAREN)
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766823899) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 723
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 726
                self.receiverParameter()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 727
                    self.match(JavaParser.COMMA)
                    self.state = 728
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 731
                    self.formalParameterList()


                pass


            self.state = 736
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.typeType()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                self.state = 739
                self.identifier()
                self.state = 740
                self.match(JavaParser.DOT)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 747
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.formalParameter()
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 750
                        self.match(JavaParser.COMMA)
                        self.state = 751
                        self.formalParameter() 
                    self.state = 756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 757
                    self.match(JavaParser.COMMA)
                    self.state = 758
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 764
                    self.variableModifier() 
                self.state = 769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 770
            self.typeType()
            self.state = 771
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.variableModifier() 
                self.state = 778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 779
            self.typeType()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                self.state = 780
                self.annotation()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 786
            self.match(JavaParser.ELLIPSIS)
            self.state = 787
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.lambdaLVTIParameter()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 790
                self.match(JavaParser.COMMA)
                self.state = 791
                self.lambdaLVTIParameter()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 797
                    self.variableModifier() 
                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 803
            self.match(JavaParser.VAR)
            self.state = 804
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.identifier()
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 807
                    self.match(JavaParser.DOT)
                    self.state = 808
                    self.identifier() 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_literal)
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 69, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.integerLiteral()
                pass
            elif token in [72, 73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.floatLiteral()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 817
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 5)
                self.state = 818
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 6)
                self.state = 819
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 7)
                self.state = 820
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            _la = self._input.LA(1)
            if not(_la==72 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                self.state = 827
                self.identifier()
                self.state = 828
                self.match(JavaParser.DOT)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 835
            self.match(JavaParser.AT)
            self.state = 836
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 838
                self.match(JavaParser.AT)
                self.state = 839
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 840
                self.altAnnotationQualifiedName()
                pass


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 843
                self.match(JavaParser.LPAREN)
                self.state = 846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 844
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 845
                    self.elementValue()


                self.state = 848
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.elementValuePair()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 852
                self.match(JavaParser.COMMA)
                self.state = 853
                self.elementValuePair()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.identifier()
            self.state = 860
            self.match(JavaParser.ASSIGN)
            self.state = 861
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValue)
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(JavaParser.LBRACE)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260026367) != 0):
                self.state = 869
                self.elementValue()
                self.state = 874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 870
                        self.match(JavaParser.COMMA)
                        self.state = 871
                        self.elementValue() 
                    self.state = 876
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)



            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 879
                self.match(JavaParser.COMMA)


            self.state = 882
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(JavaParser.AT)
            self.state = 885
            self.match(JavaParser.INTERFACE)
            self.state = 886
            self.identifier()
            self.state = 887
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(JavaParser.LBRACE)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -2627305097950551659) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660702539773) != 0):
                self.state = 890
                self.annotationTypeElementDeclaration()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 896
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 906
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 14, 16, 17, 19, 21, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 56, 57, 58, 60, 61, 63, 64, 66, 67, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 898
                        self.modifier() 
                    self.state = 903
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 904
                self.annotationTypeElementRest()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationTypeElementRest)
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.typeType()
                self.state = 909
                self.annotationMethodOrConstantRest()
                self.state = 910
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.classDeclaration()
                self.state = 914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 913
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 916
                self.interfaceDeclaration()
                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 917
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 920
                self.enumDeclaration()
                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 924
                self.annotationTypeDeclaration()
                self.state = 926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 925
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 928
                self.recordDeclaration()
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 929
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.identifier()
            self.state = 939
            self.match(JavaParser.LPAREN)
            self.state = 940
            self.match(JavaParser.RPAREN)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 941
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(JavaParser.DEFAULT)
            self.state = 947
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 949
                    self.annotation() 
                self.state = 954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 955
                self.match(JavaParser.OPEN)


            self.state = 958
            self.match(JavaParser.MODULE)
            self.state = 959
            self.qualifiedName()
            self.state = 960
            self.match(JavaParser.LBRACE)
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152941364535754752) != 0):
                self.state = 961
                self.moduleDirective()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 967
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(JavaParser.REQUIRES)
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 970
                        self.requiresModifier() 
                    self.state = 975
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 976
                self.qualifiedName()
                self.state = 977
                self.match(JavaParser.SEMI)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.match(JavaParser.EXPORTS)
                self.state = 980
                self.qualifiedName()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 981
                    self.match(JavaParser.TO)
                    self.state = 982
                    self.qualifiedName()
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 983
                        self.match(JavaParser.COMMA)
                        self.state = 984
                        self.qualifiedName()
                        self.state = 989
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 992
                self.match(JavaParser.SEMI)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 994
                self.match(JavaParser.OPENS)
                self.state = 995
                self.qualifiedName()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 996
                    self.match(JavaParser.TO)
                    self.state = 997
                    self.qualifiedName()
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 998
                        self.match(JavaParser.COMMA)
                        self.state = 999
                        self.qualifiedName()
                        self.state = 1004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1007
                self.match(JavaParser.SEMI)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1009
                self.match(JavaParser.USES)
                self.state = 1010
                self.qualifiedName()
                self.state = 1011
                self.match(JavaParser.SEMI)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1013
                self.match(JavaParser.PROVIDES)
                self.state = 1014
                self.qualifiedName()
                self.state = 1015
                self.match(JavaParser.WITH)
                self.state = 1016
                self.qualifiedName()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1017
                    self.match(JavaParser.COMMA)
                    self.state = 1018
                    self.qualifiedName()
                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1024
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            _la = self._input.LA(1)
            if not(_la==48 or _la==58):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(JavaParser.RECORD)
            self.state = 1031
            self.identifier()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1032
                self.typeParameters()


            self.state = 1035
            self.recordHeader()
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1036
                self.match(JavaParser.IMPLEMENTS)
                self.state = 1037
                self.typeList()


            self.state = 1040
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(JavaParser.LPAREN)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766823899) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                self.state = 1043
                self.recordComponentList()


            self.state = 1046
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordComponentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.recordComponent()
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1049
                    self.match(JavaParser.COMMA)
                    self.state = 1050
                    self.recordComponent() 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1056
            if not  this.DoLastRecordComponent() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " this.DoLastRecordComponent() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordComponent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1058
                    self.annotation() 
                self.state = 1063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 1064
            self.typeType()
            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                    self.state = 1065
                    self.annotation()
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1071
                self.match(JavaParser.ELLIPSIS)


            self.state = 1074
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(JavaParser.LBRACE)
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -321462088736857707) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -8935141660685729789) != 0):
                self.state = 1079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1077
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 1078
                    self.compactConstructorDeclaration()
                    pass


                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1084
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(JavaParser.LBRACE)
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129:
                self.state = 1087
                self.blockStatement()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1093
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockStatement)
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.localVariableDeclaration()
                self.state = 1096
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1102
                    self.variableModifier() 
                self.state = 1107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1108
                self.match(JavaParser.VAR)
                self.state = 1109
                self.identifier()
                self.state = 1110
                self.match(JavaParser.ASSIGN)
                self.state = 1111
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1113
                self.typeType()
                self.state = 1114
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WHEN(self):
            return self.getToken(JavaParser.WHEN, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            _la = self._input.LA(1)
            if not(((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1513308810947723264) != 0) or _la==66 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_localTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1122
                    self.classOrInterfaceModifier() 
                self.state = 1127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1128
                self.classDeclaration()
                pass
            elif token in [29]:
                self.state = 1129
                self.interfaceDeclaration()
                pass
            elif token in [43]:
                self.state = 1130
                self.recordDeclaration()
                pass
            elif token in [16]:
                self.state = 1131
                self.enumDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.match(JavaParser.ASSERT)
                self.state = 1136
                self.expression(0)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 1137
                    self.match(JavaParser.COLON)
                    self.state = 1138
                    self.expression(0)


                self.state = 1141
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1143
                self.match(JavaParser.IF)
                self.state = 1144
                self.match(JavaParser.LPAREN)
                self.state = 1145
                self.expression(0)
                self.state = 1146
                self.match(JavaParser.RPAREN)
                self.state = 1147
                self.statement()
                self.state = 1150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self.match(JavaParser.ELSE)
                    self.state = 1149
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1152
                self.match(JavaParser.FOR)
                self.state = 1153
                self.match(JavaParser.LPAREN)
                self.state = 1154
                self.forControl()
                self.state = 1155
                self.match(JavaParser.RPAREN)
                self.state = 1156
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1158
                self.match(JavaParser.WHILE)
                self.state = 1159
                self.match(JavaParser.LPAREN)
                self.state = 1160
                self.expression(0)
                self.state = 1161
                self.match(JavaParser.RPAREN)
                self.state = 1162
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1164
                self.match(JavaParser.DO)
                self.state = 1165
                self.statement()
                self.state = 1166
                self.match(JavaParser.WHILE)
                self.state = 1167
                self.match(JavaParser.LPAREN)
                self.state = 1168
                self.expression(0)
                self.state = 1169
                self.match(JavaParser.RPAREN)
                self.state = 1170
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1172
                self.match(JavaParser.TRY)
                self.state = 1173
                self.block()
                self.state = 1183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1175 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1174
                        self.catchClause()
                        self.state = 1177 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 1180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 1179
                        self.finallyBlock()


                    pass
                elif token in [20]:
                    self.state = 1182
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1185
                self.match(JavaParser.TRY)
                self.state = 1186
                self.resourceSpecification()
                self.state = 1187
                self.block()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1188
                    self.catchClause()
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1194
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1197
                self.match(JavaParser.SWITCH)
                self.state = 1198
                self.match(JavaParser.LPAREN)
                self.state = 1199
                self.expression(0)
                self.state = 1200
                self.match(JavaParser.RPAREN)
                self.state = 1201
                self.match(JavaParser.LBRACE)
                self.state = 1205
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1202
                        self.switchBlockStatementGroup() 
                    self.state = 1207
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6 or _la==12:
                    self.state = 1208
                    self.switchLabel()
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1214
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1216
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1217
                self.match(JavaParser.LPAREN)
                self.state = 1218
                self.expression(0)
                self.state = 1219
                self.match(JavaParser.RPAREN)
                self.state = 1220
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1222
                self.match(JavaParser.RETURN)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1223
                    self.expression(0)


                self.state = 1226
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1227
                self.match(JavaParser.THROW)
                self.state = 1228
                self.expression(0)
                self.state = 1229
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1231
                self.match(JavaParser.BREAK)
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                    self.state = 1232
                    self.identifier()


                self.state = 1235
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1236
                self.match(JavaParser.CONTINUE)
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==129:
                    self.state = 1237
                    self.identifier()


                self.state = 1240
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1241
                self.match(JavaParser.YIELD)
                self.state = 1242
                self.expression(0)
                self.state = 1243
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1245
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1246
                localctx.statementExpression = self.expression(0)
                self.state = 1247
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1249
                self.switchExpression()
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1250
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1253
                localctx.identifierLabel = self.identifier()
                self.state = 1254
                self.match(JavaParser.COLON)
                self.state = 1255
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(JavaParser.CATCH)
            self.state = 1260
            self.match(JavaParser.LPAREN)
            self.state = 1264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1261
                    self.variableModifier() 
                self.state = 1266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

            self.state = 1267
            self.catchType()
            self.state = 1268
            self.identifier()
            self.state = 1269
            self.match(JavaParser.RPAREN)
            self.state = 1270
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.qualifiedName()
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108:
                self.state = 1273
                self.match(JavaParser.BITOR)
                self.state = 1274
                self.qualifiedName()
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(JavaParser.FINALLY)
            self.state = 1281
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(JavaParser.LPAREN)
            self.state = 1284
            self.resources()
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 1285
                self.match(JavaParser.SEMI)


            self.state = 1288
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.resource()
            self.state = 1295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1291
                    self.match(JavaParser.SEMI)
                    self.state = 1292
                    self.resource() 
                self.state = 1297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_resource)
        try:
            self.state = 1315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1298
                        self.variableModifier() 
                    self.state = 1303
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1304
                    self.classOrInterfaceType()
                    self.state = 1305
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1307
                    self.match(JavaParser.VAR)
                    self.state = 1308
                    self.identifier()
                    pass


                self.state = 1311
                self.match(JavaParser.ASSIGN)
                self.state = 1312
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1314
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COLON)
            else:
                return self.getToken(JavaParser.COLON, i)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1317
                self.switchLabel()
                self.state = 1318
                self.match(JavaParser.COLON)
                self.state = 1322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==12):
                    break

            self.state = 1325 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1324
                self.blockStatement()
                self.state = 1327 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_switchLabel)
        try:
            self.state = 1338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.match(JavaParser.CASE)
                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1330
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1331
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1332
                    self.typeType()
                    self.state = 1333
                    localctx.varName = self.identifier()
                    pass


                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.match(JavaParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017684443) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1341
                    self.forInit()


                self.state = 1344
                self.match(JavaParser.SEMI)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1345
                    self.expression(0)


                self.state = 1348
                self.match(JavaParser.SEMI)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                    self.state = 1349
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_forInit)
        try:
            self.state = 1356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1355
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1358
                    self.variableModifier() 
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1364
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1365
                self.match(JavaParser.VAR)
                pass


            self.state = 1368
            self.variableDeclaratorId()
            self.state = 1369
            self.match(JavaParser.COLON)
            self.state = 1370
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.expression(0)
            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1373
                self.match(JavaParser.COMMA)
                self.state = 1374
                self.expression(0)
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.state = 1380
                self.identifier()
                pass
            elif token in [53]:
                self.state = 1381
                self.match(JavaParser.THIS)
                pass
            elif token in [50]:
                self.state = 1382
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1385
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return JavaParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TernaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)
        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class InstanceOfOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)
        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfOperatorExpression" ):
                listener.enterInstanceOfOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfOperatorExpression" ):
                listener.exitInstanceOfOperatorExpression(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)
        def INC(self):
            return self.getToken(JavaParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)
        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)
        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)


    class PrimaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)


    class ObjectCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreationExpression" ):
                listener.enterObjectCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreationExpression" ):
                listener.exitObjectCreationExpression(self)


    class ExpressionLambdaContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionLambda" ):
                listener.enterExpressionLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionLambda" ):
                listener.exitExpressionLambda(self)


    class PostIncrementDecrementOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.postfix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)
        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementDecrementOperatorExpression" ):
                listener.enterPostIncrementDecrementOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementDecrementOperatorExpression" ):
                listener.exitPostIncrementDecrementOperatorExpression(self)


    class MemberReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)
        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)

        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberReferenceExpression" ):
                listener.enterMemberReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberReferenceExpression" ):
                listener.exitMemberReferenceExpression(self)


    class ExpressionSwitchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSwitch" ):
                listener.enterExpressionSwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSwitch" ):
                listener.exitExpressionSwitch(self)


    class BinaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.bop = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)
        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)
        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)
        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)
        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)
        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)
        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)
        def LE(self):
            return self.getToken(JavaParser.LE, 0)
        def GE(self):
            return self.getToken(JavaParser.GE, 0)
        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)
        def BITAND(self):
            return self.getToken(JavaParser.BITAND, 0)
        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)
        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)
        def AND(self):
            return self.getToken(JavaParser.AND, 0)
        def OR(self):
            return self.getToken(JavaParser.OR, 0)
        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOperatorExpression" ):
                listener.enterBinaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOperatorExpression" ):
                listener.exitBinaryOperatorExpression(self)


    class MethodCallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpression" ):
                listener.enterMethodCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpression" ):
                listener.exitMethodCallExpression(self)


    class MethodReferenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)

        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)
        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)
        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReferenceExpression" ):
                listener.enterMethodReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReferenceExpression" ):
                listener.exitMethodReferenceExpression(self)


    class SquareBracketExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareBracketExpression" ):
                listener.enterSquareBracketExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareBracketExpression" ):
                listener.exitSquareBracketExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a JavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)
        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)

        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                localctx = JavaParser.PrimaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1388
                self.primary()
                pass

            elif la_ == 2:
                localctx = JavaParser.MethodCallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1389
                self.methodCall()
                pass

            elif la_ == 3:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1390
                self.typeType()
                self.state = 1391
                self.match(JavaParser.COLONCOLON)
                self.state = 1397
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 90, 129]:
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 1392
                        self.typeArguments()


                    self.state = 1395
                    self.identifier()
                    pass
                elif token in [33]:
                    self.state = 1396
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = JavaParser.MethodReferenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1399
                self.classType()
                self.state = 1400
                self.match(JavaParser.COLONCOLON)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1401
                    self.typeArguments()


                self.state = 1404
                self.match(JavaParser.NEW)
                pass

            elif la_ == 5:
                localctx = JavaParser.ExpressionSwitchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1406
                self.switchExpression()
                pass

            elif la_ == 6:
                localctx = JavaParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1407
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1408
                self.expression(17)
                pass

            elif la_ == 7:
                localctx = JavaParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1409
                self.match(JavaParser.LPAREN)
                self.state = 1413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1410
                        self.annotation() 
                    self.state = 1415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1416
                self.typeType()
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==107:
                    self.state = 1417
                    self.match(JavaParser.BITAND)
                    self.state = 1418
                    self.typeType()
                    self.state = 1423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1424
                self.match(JavaParser.RPAREN)
                self.state = 1425
                self.expression(16)
                pass

            elif la_ == 8:
                localctx = JavaParser.ObjectCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1427
                self.match(JavaParser.NEW)
                self.state = 1428
                self.creator()
                pass

            elif la_ == 9:
                localctx = JavaParser.ExpressionLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1429
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1513
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1432
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1433
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1434
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1435
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1436
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==103 or _la==104):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1437
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1438
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1446
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                        if la_ == 1:
                            self.state = 1439
                            self.match(JavaParser.LT)
                            self.state = 1440
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1441
                            self.match(JavaParser.GT)
                            self.state = 1442
                            self.match(JavaParser.GT)
                            self.state = 1443
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1444
                            self.match(JavaParser.GT)
                            self.state = 1445
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1448
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1449
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1450
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1451
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1452
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1453
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==95 or _la==98):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1454
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1455
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1456
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1457
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1458
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1459
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1460
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1461
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1462
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1463
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1464
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1465
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1466
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1467
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1468
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1469
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.TernaryExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1470
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1471
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1472
                        self.expression(0)
                        self.state = 1473
                        self.match(JavaParser.COLON)
                        self.state = 1474
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.BinaryOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1476
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1477
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1478
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.SquareBracketExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1479
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1480
                        self.match(JavaParser.LBRACK)
                        self.state = 1481
                        self.expression(0)
                        self.state = 1482
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.MemberReferenceExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1484
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1485
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1497
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                        if la_ == 1:
                            self.state = 1486
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1487
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1488
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1489
                            self.match(JavaParser.NEW)
                            self.state = 1491
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==90:
                                self.state = 1490
                                self.nonWildcardTypeArguments()


                            self.state = 1493
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1494
                            self.match(JavaParser.SUPER)
                            self.state = 1495
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1496
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaParser.MethodReferenceExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1499
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1500
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==90:
                            self.state = 1501
                            self.typeArguments()


                        self.state = 1504
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.PostIncrementDecrementOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1505
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1506
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==101 or _la==102):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.InstanceOfOperatorExpressionContext(self, JavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1507
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1508
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1511
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                        if la_ == 1:
                            self.state = 1509
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1510
                            self.pattern()
                            pass


                        pass

             
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def componentPatternList(self):
            return self.getTypedRuleContext(JavaParser.ComponentPatternListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1518
                        self.variableModifier() 
                    self.state = 1523
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                self.state = 1524
                self.typeType()
                self.state = 1528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1525
                        self.annotation() 
                    self.state = 1530
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1531
                self.variableDeclarators()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.typeType()
                self.state = 1534
                self.match(JavaParser.LPAREN)
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 1535
                    self.componentPatternList()


                self.state = 1538
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentPatternListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ComponentPatternContext)
            else:
                return self.getTypedRuleContext(JavaParser.ComponentPatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_componentPatternList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentPatternList" ):
                listener.enterComponentPatternList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentPatternList" ):
                listener.exitComponentPatternList(self)




    def componentPatternList(self):

        localctx = JavaParser.ComponentPatternListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_componentPatternList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.componentPattern()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1543
                self.match(JavaParser.COMMA)
                self.state = 1544
                self.componentPattern()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_componentPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentPattern" ):
                listener.enterComponentPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentPattern" ):
                listener.exitComponentPattern(self)




    def componentPattern(self):

        localctx = JavaParser.ComponentPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_componentPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.lambdaParameters()
            self.state = 1553
            self.match(JavaParser.ARROW)
            self.state = 1554
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1556
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1557
                self.match(JavaParser.LPAREN)
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -6440117457766758363) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801206503243777) != 0):
                    self.state = 1558
                    self.formalParameterList()


                self.state = 1561
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1562
                self.match(JavaParser.LPAREN)
                self.state = 1563
                self.identifier()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1564
                    self.match(JavaParser.COMMA)
                    self.state = 1565
                    self.identifier()
                    self.state = 1570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1571
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1573
                self.match(JavaParser.LPAREN)
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630021) != 0) or _la==124 or _la==129:
                    self.state = 1574
                    self.lambdaLVTIList()


                self.state = 1577
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_lambdaBody)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 17, 21, 28, 30, 31, 33, 35, 36, 38, 41, 43, 44, 46, 47, 50, 51, 53, 56, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 90, 91, 92, 101, 102, 103, 104, 124, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1580
                self.expression(0)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_primary)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(JavaParser.LPAREN)
                self.state = 1585
                self.expression(0)
                self.state = 1586
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1589
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1590
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1591
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1592
                self.typeTypeOrVoid()
                self.state = 1593
                self.match(JavaParser.DOT)
                self.state = 1594
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1596
                self.nonWildcardTypeArguments()
                self.state = 1600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 50, 56, 58, 60, 61, 64, 66, 67, 129]:
                    self.state = 1597
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [53]:
                    self.state = 1598
                    self.match(JavaParser.THIS)
                    self.state = 1599
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.match(JavaParser.SWITCH)
            self.state = 1605
            self.match(JavaParser.LPAREN)
            self.state = 1606
            self.expression(0)
            self.state = 1607
            self.match(JavaParser.RPAREN)
            self.state = 1608
            self.match(JavaParser.LBRACE)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1609
                self.switchLabeledRule()
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1615
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def casePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CasePatternContext)
            else:
                return self.getTypedRuleContext(JavaParser.CasePatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def guard(self):
            return self.getTypedRuleContext(JavaParser.GuardContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1617
                self.match(JavaParser.CASE)
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1618
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1619
                    self.match(JavaParser.NULL_LITERAL)
                    self.state = 1622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==86:
                        self.state = 1620
                        self.match(JavaParser.COMMA)
                        self.state = 1621
                        self.match(JavaParser.DEFAULT)


                    pass

                elif la_ == 3:
                    self.state = 1624
                    self.casePattern()
                    self.state = 1629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==86:
                        self.state = 1625
                        self.match(JavaParser.COMMA)
                        self.state = 1626
                        self.casePattern()
                        self.state = 1631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1632
                        self.guard()


                    pass


                self.state = 1637
                _la = self._input.LA(1)
                if not(_la==94 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1638
                self.switchRuleOutcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.match(JavaParser.DEFAULT)
                self.state = 1640
                _la = self._input.LA(1)
                if not(_la==94 or _la==122):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1641
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(JavaParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)




    def guard(self):

        localctx = JavaParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(JavaParser.WHEN)
            self.state = 1645
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CasePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_casePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasePattern" ):
                listener.enterCasePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasePattern" ):
                listener.exitCasePattern(self)




    def casePattern(self):

        localctx = JavaParser.CasePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_casePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9043227909781416766) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1152923566663204863) != 0) or _la==129:
                    self.state = 1650
                    self.blockStatement()
                    self.state = 1655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1658
                self.classOrInterfaceType()
                self.state = 1659
                self.match(JavaParser.DOT)


            self.state = 1666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1663
                    self.annotation() 
                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

            self.state = 1669
            self.identifier()
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1670
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_creator)
        self._la = 0 # Token type
        try:
            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1673
                    self.nonWildcardTypeArguments()


                self.state = 1676
                self.createdName()
                self.state = 1677
                self.classCreatorRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.createdName()
                self.state = 1680
                self.arrayCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                self.identifier()
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1685
                    self.typeArgumentsOrDiamond()


                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==87:
                    self.state = 1688
                    self.match(JavaParser.DOT)
                    self.state = 1689
                    self.identifier()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 1690
                        self.typeArgumentsOrDiamond()


                    self.state = 1697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 21, 28, 30, 47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.identifier()
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1702
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1705
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1709 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1707
                    self.match(JavaParser.LBRACK)
                    self.state = 1708
                    self.match(JavaParser.RBRACK)
                    self.state = 1711 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==83):
                        break

                self.state = 1713
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1714
                        self.match(JavaParser.LBRACK)
                        self.state = 1715
                        self.expression(0)
                        self.state = 1716
                        self.match(JavaParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1720 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                self.state = 1726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1722
                        self.match(JavaParser.LBRACK)
                        self.state = 1723
                        self.match(JavaParser.RBRACK) 
                    self.state = 1728
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.arguments()
            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1732
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.nonWildcardTypeArguments()
            self.state = 1736
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1738
                self.match(JavaParser.LT)
                self.state = 1739
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1740
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1743
                self.match(JavaParser.LT)
                self.state = 1744
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1745
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(JavaParser.LT)
            self.state = 1749
            self.typeList()
            self.state = 1750
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.typeType()
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1753
                self.match(JavaParser.COMMA)
                self.state = 1754
                self.typeType()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1760
                    self.annotation() 
                self.state = 1765
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

            self.state = 1768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.state = 1766
                self.classOrInterfaceType()
                pass
            elif token in [3, 5, 8, 14, 21, 28, 30, 47]:
                self.state = 1767
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 1858725164630017) != 0) or _la==124 or _la==129:
                        self.state = 1770
                        self.annotation()
                        self.state = 1775
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1776
                    self.match(JavaParser.LBRACK)
                    self.state = 1777
                    self.match(JavaParser.RBRACK) 
                self.state = 1782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 140738832646440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.match(JavaParser.LT)
            self.state = 1786
            self.typeArgument()
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1787
                self.match(JavaParser.COMMA)
                self.state = 1788
                self.typeArgument()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1794
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1796
                self.arguments()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1797
                self.match(JavaParser.DOT)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 1798
                    self.typeArguments()


                self.state = 1801
                self.identifier()
                self.state = 1803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1802
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.match(JavaParser.SUPER)
                self.state = 1808
                self.superSuffix()
                pass
            elif token in [17, 31, 35, 36, 38, 41, 43, 44, 46, 56, 58, 60, 61, 64, 66, 67, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1809
                self.identifier()
                self.state = 1810
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(JavaParser.LPAREN)
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & -5862108592017749979) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4755801464260009983) != 0):
                self.state = 1815
                self.expressionList()


            self.state = 1818
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[75] = self.recordComponentList_sempred
        self._predicates[98] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def recordComponentList_sempred(self, localctx:RecordComponentListContext, predIndex:int):
            if predIndex == 0:
                return  this.DoLastRecordComponent() 
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 10)
         





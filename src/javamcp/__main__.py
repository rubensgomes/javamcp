# Generated by Claude
"""
Entry point for running JavaMCP server.
"""

import argparse
import sys

from javamcp.logging import (get_logger, log_server_shutdown,
                             log_server_startup, setup_logging)
from javamcp.server import create_server


def main() -> int:
    """
    Main entry point for JavaMCP server.

    Returns:
        Exit code (0 for success, 1 for failure)
    """
    parser = argparse.ArgumentParser(
        description="JavaMCP Server - MCP server for Java API documentation"
    )
    parser.add_argument(
        "--config",
        "-c",
        type=str,
        default=None,
        help="Path to configuration file (YAML or JSON)",
    )
    parser.add_argument(
        "--mode",
        "-m",
        type=str,
        choices=["stdio", "http"],
        default=None,
        help="Server mode (overrides config)",
    )

    args = parser.parse_args()

    try:
        # Create server
        server = create_server(args.config)

        # Setup logging
        logger = setup_logging(server.config.logging)
        log_server_startup(logger, args.config)

        # Initialize server
        logger.info("Initializing JavaMCP server...")
        server.initialize()
        logger.info("Server initialized successfully")

        # TODO: Start MCP server in specified mode (Phase 6)
        # For now, just log that we would start
        logger.info("Server ready (mode: %s)", args.mode or server.config.server.mode)
        logger.info("Server startup complete")

        # Shutdown
        log_server_shutdown(logger)
        server.shutdown()

        return 0

    except KeyboardInterrupt:
        logger = get_logger()
        logger.info("Received shutdown signal")
        log_server_shutdown(logger)
        return 0

    except Exception as e:  # pylint: disable=broad-exception-caught
        logger = get_logger()
        logger.error("Server error: %s", e, exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())

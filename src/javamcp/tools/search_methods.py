# Generated by Claude
"""
MCP tool for searching Java methods by name.
"""

from javamcp.context.context_builder import ContextBuilder
from javamcp.indexer.query_engine import QueryEngine
from javamcp.models.mcp_protocol import (SearchMethodsRequest,
                                         SearchMethodsResponse)


def search_methods_tool(
    request: SearchMethodsRequest, query_engine: QueryEngine
) -> SearchMethodsResponse:
    """
    Search for Java methods by name with optional class filter.

    Provides rich context including method signatures, javadocs, parameters,
    and containing class information.

    Args:
        request: SearchMethodsRequest with method name and optional filters
        query_engine: QueryEngine instance for searching

    Returns:
        SearchMethodsResponse with matching methods and full context
    """
    context_builder = ContextBuilder()

    # Search for methods
    results = query_engine.search_methods(
        request.method_name,
        class_name=request.class_name,
        case_sensitive=request.case_sensitive,
    )

    # Build rich context for each method
    methods_with_context = []
    for java_class, method in results:
        # Add context to method
        context_builder.build_method_context(method, java_class)
        methods_with_context.append(method)

    return SearchMethodsResponse(
        methods=methods_with_context,
        total_found=len(methods_with_context),
        query=request,
    )

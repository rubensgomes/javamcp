# Generated by Claude
"""
MCP tool for extracting APIs from a Git repository.
"""

from javamcp.config.schema import RepositoryConfig
from javamcp.context.context_builder import ContextBuilder
from javamcp.indexer.indexer import APIIndexer
from javamcp.models.mcp_protocol import ExtractApisRequest, ExtractApisResponse
from javamcp.parser.java_parser import JavaSourceParser
from javamcp.repository.manager import RepositoryManager


def extract_apis_tool(
    request: ExtractApisRequest,
    indexer: APIIndexer,
) -> ExtractApisResponse:
    """
    Extract Java APIs from a Git repository.

    Clones/updates repository, parses Java files, and indexes APIs with
    rich context including javadocs and API summaries.

    Args:
        request: ExtractApisRequest with repository URL, branch, and filters
        indexer: APIIndexer instance for storing parsed APIs

    Returns:
        ExtractApisResponse with extracted classes and context
    """
    context_builder = ContextBuilder()

    # Initialize repository manager
    repo_config = RepositoryConfig(
        urls=[request.repository_url],
        local_base_path="./repositories",
    )
    repo_manager = RepositoryManager(repo_config)

    # Clone/update repository
    repo_manager.initialize_repositories()

    # Get Java files
    java_files = repo_manager.get_java_files(request.repository_url)

    # Filter by package if specified
    if request.package_filter:
        java_files = repo_manager.filter_java_files_by_package(
            request.repository_url, request.package_filter
        )

    # Parse Java files
    parser = JavaSourceParser()
    parsed_classes = []

    for java_file in java_files:
        try:
            java_class = parser.parse_file(str(java_file))

            # Filter by class name if specified
            if request.class_filter:
                if request.class_filter.lower() not in java_class.name.lower():
                    continue

            parsed_classes.append(java_class)

            # Index the class
            indexer.add_class(java_class, request.repository_url)

        except Exception:  # pylint: disable=broad-exception-caught
            # Skip files that fail to parse
            continue

    # Build context for response
    for java_class in parsed_classes:
        context_builder.build_class_context(java_class)

    total_methods = sum(len(cls.methods) for cls in parsed_classes)

    return ExtractApisResponse(
        classes=parsed_classes,
        total_classes=len(parsed_classes),
        total_methods=total_methods,
        repository_url=request.repository_url,
        branch=request.branch,
    )

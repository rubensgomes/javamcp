# Generated by Claude
"""
Context builder for creating rich contextual information about Java APIs.
"""

from typing import Optional

from javamcp.models.java_entities import JavaClass, JavaMethod

from .formatter import format_class_context, format_method_context


class ContextBuilder:
    """
    Builds rich contextual information for Java APIs including summaries and Javadocs.
    """

    def build_class_context(
        self, java_class: JavaClass, include_methods: bool = True
    ) -> dict[str, any]:
        """
        Build rich context for a Java class.

        Args:
            java_class: JavaClass to build context for
            include_methods: Whether to include method details

        Returns:
            Dictionary containing formatted class context
        """
        context = {
            "name": java_class.name,
            "fully_qualified_name": java_class.fully_qualified_name,
            "package": java_class.package,
            "type": self._get_class_type(java_class),
            "modifiers": java_class.modifiers,
            "summary": self._get_class_summary(java_class),
            "javadoc": self._format_javadoc(java_class.javadoc),
            "inheritance": self._build_inheritance_info(java_class),
            "annotations": [ann.name for ann in java_class.annotations],
        }

        if include_methods:
            context["methods"] = [
                self.build_method_context(method, java_class)
                for method in java_class.methods
            ]
            context["fields"] = [
                self._build_field_context(field) for field in java_class.fields
            ]

        return context

    def build_method_context(
        self, method: JavaMethod, containing_class: Optional[JavaClass] = None
    ) -> dict[str, any]:
        """
        Build rich context for a Java method.

        Args:
            method: JavaMethod to build context for
            containing_class: Optional containing class for additional context

        Returns:
            Dictionary containing formatted method context
        """
        context = {
            "name": method.name,
            "signature": method.signature,
            "return_type": method.return_type,
            "modifiers": method.modifiers,
            "summary": self._get_method_summary(method),
            "javadoc": self._format_javadoc(method.javadoc),
            "parameters": [
                {
                    "name": param.name,
                    "type": param.type,
                    "description": self._get_param_description(method, param.name),
                }
                for param in method.parameters
            ],
            "return_description": (method.javadoc.returns if method.javadoc else ""),
            "throws": method.throws,
            "annotations": [ann.name for ann in method.annotations],
            "is_constructor": method.is_constructor,
        }

        if containing_class:
            context["class_name"] = containing_class.name
            context["class_fqn"] = containing_class.fully_qualified_name

        return context

    def build_api_summary(
        self, java_class: JavaClass, include_code_snippets: bool = False
    ) -> str:
        """
        Build a formatted API summary for a class.

        Args:
            java_class: JavaClass to summarize
            include_code_snippets: Whether to include code snippets

        Returns:
            Formatted API summary string
        """
        return format_class_context(java_class, include_code_snippets)

    def build_method_summary(self, method: JavaMethod, java_class: JavaClass) -> str:
        """
        Build a formatted method summary.

        Args:
            method: JavaMethod to summarize
            java_class: Containing class

        Returns:
            Formatted method summary string
        """
        return format_method_context(method, java_class)

    def aggregate_class_contexts(
        self, java_classes: list[JavaClass]
    ) -> list[dict[str, any]]:
        """
        Aggregate contexts for multiple classes.

        Args:
            java_classes: List of JavaClass objects

        Returns:
            List of context dictionaries
        """
        return [self.build_class_context(cls) for cls in java_classes]

    def _get_class_type(self, java_class: JavaClass) -> str:
        """Determine class type (class, interface, enum, abstract)."""
        if java_class.is_interface:
            return "interface"
        if java_class.is_enum:
            return "enum"
        if java_class.is_abstract:
            return "abstract class"
        return "class"

    def _get_class_summary(self, java_class: JavaClass) -> str:
        """Extract class summary from Javadoc."""
        if java_class.javadoc and java_class.javadoc.summary:
            return java_class.javadoc.summary
        return f"{self._get_class_type(java_class).capitalize()} {java_class.name}"

    def _get_method_summary(self, method: JavaMethod) -> str:
        """Extract method summary from Javadoc."""
        if method.javadoc and method.javadoc.summary:
            return method.javadoc.summary
        return f"Method {method.name}"

    def _build_inheritance_info(self, java_class: JavaClass) -> dict[str, any]:
        """Build inheritance information."""
        return {
            "extends": java_class.extends,
            "implements": java_class.implements,
        }

    def _build_field_context(self, field) -> dict[str, any]:
        """Build context for a field."""
        return {
            "name": field.name,
            "type": field.type,
            "modifiers": field.modifiers,
            "javadoc": self._format_javadoc(field.javadoc) if field.javadoc else None,
        }

    def _format_javadoc(self, javadoc) -> Optional[dict[str, any]]:
        """Format Javadoc into a structured dictionary."""
        if not javadoc:
            return None

        return {
            "summary": javadoc.summary,
            "description": javadoc.description,
            "params": javadoc.params,
            "returns": javadoc.returns,
            "throws": javadoc.throws,
            "see": javadoc.see,
            "since": javadoc.since,
            "deprecated": javadoc.deprecated,
            "author": javadoc.author,
            "examples": javadoc.examples,
        }

    def _get_param_description(self, method: JavaMethod, param_name: str) -> str:
        """Get parameter description from method Javadoc."""
        if method.javadoc and param_name in method.javadoc.params:
            return method.javadoc.params[param_name]
        return ""

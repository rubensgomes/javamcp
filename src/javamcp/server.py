# Generated by Claude
"""
FastMCP server for exposing Java APIs to AI assistants.
"""

from javamcp.config.loader import load_config
from javamcp.config.schema import ApplicationConfig
from javamcp.indexer.indexer import APIIndexer
from javamcp.indexer.query_engine import QueryEngine
from javamcp.repository.manager import RepositoryManager


class JavaMCPServer:
    """
    MCP server for exposing Java API information with context.

    Integrates repository management, parsing, indexing, and querying
    to provide rich contextual information about Java APIs including
    javadocs, summaries, and API documentation.
    """

    def __init__(self, config: ApplicationConfig):
        """
        Initialize the MCP server.

        Args:
            config: Application configuration
        """
        self.config = config
        self.repository_manager = RepositoryManager(config.repositories)
        self.indexer = APIIndexer()
        self.query_engine = QueryEngine(self.indexer)
        self._initialized = False

    def initialize(self) -> None:
        """
        Initialize the server: clone repositories and build initial index.
        """
        # Initialize repositories
        self.repository_manager.initialize_repositories()

        # TODO: Parse and index Java files from repositories
        # This would be implemented in the full version

        self._initialized = True

    def is_initialized(self) -> bool:
        """Check if server is initialized."""
        return self._initialized

    def get_query_engine(self) -> QueryEngine:
        """Get the query engine for searching APIs."""
        return self.query_engine

    def get_indexer(self) -> APIIndexer:
        """Get the API indexer."""
        return self.indexer

    def shutdown(self) -> None:
        """Shutdown the server and cleanup resources."""
        self.indexer.clear()
        self._initialized = False


def create_server(config_path: str = None) -> JavaMCPServer:
    """
    Create and initialize a JavaMCPServer.

    Args:
        config_path: Optional path to configuration file

    Returns:
        Initialized JavaMCPServer instance
    """
    config = load_config(config_path)
    server = JavaMCPServer(config)
    return server
